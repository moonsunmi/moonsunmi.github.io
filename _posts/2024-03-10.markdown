---
layout: post
title: "React deep dive) 가상 DOM과 리액트 파이버"
date: 2024-03-10 12:18:07 +0900
tags: deepdive
---

###### \<모던 리액트 Deep Dive\>의 내용을 제가 이해한 바로 다시 정리한 글입니다.

DOM(Document Object Model)은 웹페이지에 대한 인터페이스로, 브라우저가 웹 페이지의 콘텐츠와 구조를 어떻게 보여줄지에 대한 정보를 가지고 있다.

브라우저의 렌더링 엔진은 HTML을 파싱해 DOM 노드로 구성된 트리를 만든다. DOM 트리가 만들어지는 과정은 다음과 같다.

1. HTML 파싱: 브라우저가 HTML 문서를 받아와서 파싱하고, DOM(Document Object Model) 트리를 생성한다. DOM 트리는 웹 페이지의 객체 구조를 나타낸다.
2. CSS 파싱 및 계산: 브라우저는 CSS 스타일시트를 파싱하여 CSSOM(CSS Object Model) 트리를 생성한다. 그런 다음, DOM과 CSSOM 트리를 결합하여 렌더 트리를 만든다. 렌더 트리는 화면에 그려질 요소와 스타일 정보가 들어 있다.
3. 레이아웃: 렌더 트리를 사용하여 각 요소의 위치와 크기를 계산한다.
4. 페이팅: 레이아웃 과정에서 계산된 위치와 크기 정보를 기반으로 각 요소를 화면에 그립니다. 래스터화라고도 한다.

### 가상 DOM이 필요해진 이유

한번 DOM이 만들어진다고 끝이 아니다. 사용자의 인터랙션을 반영해야 한다.

파이버 구조는 컴포넌트 트리(컴포넌트의 계층적 구조, DOM으로 표현된다)의 업데이트, 렌더링 등을 효율적으로 하기 위해 도입되었다.

각 컴포넌트를 파이버라는 작업 단위로 관리하는데, 파이버에는 이에 대한 메타 데이터가 들어 있다. 파이버 재조정자는 이 정보를 가지고, 어떤 작업을 먼저 할지, 어느 시점에 작업을 시작하고 중단한지 결정한다. 중요한 건 이 작업이 비동기적으로 일어난다는 것이다. 그래서 먼저 들어온 시간이 많이 걸리는 작업들이 다른 작업을 막아서 생기는 비효율을 줄일 수 있다.

파이버 트리는 리액트 내부에 두 개가 존재한다. 하나는 현재 모습을 담은 파이버 트리(Current Fiber Tree)이고, 하나는 작업 중인 상태(Work-In-Progress Fiber Tree)의 트리이다.

그림을 그리는 과정을 다 보여주는 게 아니라 완성된 상태만 보여주기 위해, 그 과정은 workInProgress 트리에서 구현하고, 완성되면 현재의 파이버 트리로 참조만 바꿔 버린다.

먼저 버퍼(이 경우엔 작업 중인 파이버 트리)에 그림을 그리고, 완성된 후에 이를 화면에 표시하는 기술을 더블 버퍼링이라고 한다.
