---
layout: post
title: "React deep dive) 서버사이드 렌더링의 과정과 장단점"
date: 2024-03-23 12:18:07 +0900
tags: deepdive
---

서버사이드렌더링 애플리케이션의 반대 개념인 싱글 페이지 애플리케이션

싱글 페이지 애플리케이션이란, 렌더링과 라우팅에 필요한 대부분의 기능을 서버가 아닌 브라우저의 자바스크립트에 의존하는 방식이다.

서버사이드렌더링은 최초 페이지 렌더링을 서버에서 수행한다.

싱글 페이지 애플리케이션에 비해 가지는 서버사이드렌더링의 몇 가지 특징은 다음과 같다.

### 서버 사이드 렌더링 과정

1. 서버에서 데이터 가져오기: 이 단계에서 서버는 클라이언트의 요청을 받고, 해당 페이지 또는 컴포넌트에 필요한 데이터를 외부 API 호출(fetch 등)을 통해 가져옵니다. 이 과정은 서버에서 이루어집니다.

2. HTML 완성: 서버는 1단계에서 가져온 데이터를 바탕으로 HTML을 완성합니다. 이 때, 리액트와 같은 라이브러리를 사용하여 서버 사이드 렌더링을 구현할 수 있으며, 이를 통해 생성된 HTML은 초기 상태의 데이터를 포함하게 됩니다. 이 과정 역시 서버에서 이루어집니다.

3. 클라이언트에 정보 제공: 서버는 완성된 HTML을 클라이언트에 응답으로 보냅니다. 이 HTML은 브라우저에서 초기 렌더링을 위해 사용됩니다.

4. 클라이언트에서 hydrate 작업: 클라이언트(브라우저)는 서버로부터 받은 HTML을 기반으로 페이지를 렌더링합니다. 그 후, 리액트와 같은 라이브러리를 사용하여 'hydrate' 작업을 수행합니다. 이 과정에서는 서버에서 생성된 HTML에 리액트 컴포넌트의 이벤트 핸들러와 같은 동적 기능을 바인딩합니다.

5. 불일치 에러 처리: 만약 서버에서 생성한 HTML과 클라이언트에서 hydrate 과정을 거친 후의 DOM이 일치하지 않는 경우, 불일치 에러가 발생할 수 있습니다. 이는 주로 개발 과정에서 발견되며, 해결을 위해 코드를 수정해야 합니다.

6. 추가적인 데이터 가져오기: 애플리케이션의 동작 중에 클라이언트 측에서 추가적인 데이터가 필요한 경우(예: 사용자 인터랙션에 의해), 클라이언트는 추가적인 API 호출을 통해 데이터를 가져오고 이를 화면에 반영할 수 있습니다. 이 과정은 클라이언트(브라우저)에서 이루어집니다.

#### 장점

1. 최초 페이지 진입이 비교적 빠르다
   특히 화면 렌더링이 HTTP 요청에 의존적이고, 렌더링해야 할 HTML의 크기가 클수록 더 빨라진다.

2. 검색 엔진과 SNS 공유 등 메타데이터 제공이 쉽다
   검색 엔진 로봇은 페이지의 정적인 정보를 가져오는 것을 목적으로 하므로, 자바스크립트를 다운로드하거나 실행하지 않는다.
   싱글 페이지 애플리케이션은 대부분의 동작이 자바스크립트로 이루어지므로 검색 엔진 로봇에게 정보를 주는 데 취약하다.

3. 누적 레이아웃 이동이 적다
   각각의 콘텐츠가 API 요청에 의존적이었을 때를 예로 들어 보자. 하단에 있는 콘텐츠가 먼저 응답을 받아 보여주다가, 상단의 콘텐츠가 나중에 띄워지면 하단 콘텐츠의 레이아웃이 이동된다. 이는 사용자에게 불편을 끼친다.

4. 사용자의 디바이스 성능에 비교적 자유롭다
   자바스크립트는 사용자 디바이스에서 실행하므로, 싱글 페이지 애플리케이션은 사용자의 디바이스에 따라 성능이 많이 좌우된다.

5. 보안에 좀 더 안전하다
   서버 사이드 렌더링의 경우 인증 등 민감한 작업을 서버에서 수행하고, 결과만 브라우저에 제공하면 되므로, 보안 위협을 피할 수 있다.

#### 단점

1. 코드 작성 시 항상 서버를 고려해야 한다
   window나 sessionStorage 같이 브라우저에만 있는 전역 객체 등이 서버에서도 실행될 가능성이 있다면 사용해서는 안 된다. 이는 외부 라이브러리 또한 마찬가지다.

2. 적절한 서버가 구축돼 있어야 한다
   말 그대로 서버가 고축되어야 하는데, 이게 쉬운 일은 아니다.

3. 서비스 지연에 따른 문제
   지연이 발생한다면, 싱글 페이지 애플리케이션처럼 로딩중과 같은 화면 같은 대응조차도 할 수가 없다.
