---
layout: post
title:  "w3school React"
date:   2022-10-15 12:18:07 +0900
categories: react
---

| (달성/목표) | 뽀모도리  | 등   | 가슴 | 배   |
|----|-------|-----|-------|-----|
| 1일 | 8/8   | 0/5 | 5/5 | 0/3 |
| 1주 | 32/40 |     |       |



### useCallback

메모라이즈 콜백 함수를 리턴한다.

memoization: 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술.

`useCallback`은 의존성이 있는 값이 업데이트될 때만 작동한다. 퍼포먼스 향상!

`useCallback`과 `useMemo`는 매우 비슷하다. 차이점은 `useMemo`는 메모라이즈 값을 반환한다면, `useCallback`은 메모라이즈 함수를 반환한다는 것.

index.js
```js
import { useState, useCallback } from "react";
import ReactDOM from "react-dom/client";
import Todos from "./Todos";

const App = () => {
  const [count, setCount] = useState(0);
  const [todos, setTodos] = useState([]);

  const increment = () => {
    setCount((count) => count + 1);
  };

  const addTodo = useCallback(() => {
    setTodos((todos) => [...todos, "NEW TODO"]);
  }, [todos]);

  return (
    <>
      <Todos todos={todos} addTodo={addTodo} />
      <hr />
      <div>
        <p>Count: {count}</p>
        <button onClick={increment}>+</button>
      </div>
    </>
  );
};

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
```

Todos.js
```js
import { memo } from "react";

const Todos = ({ todos, addTodo }) => {
  return (
    <>
      <h1>My Todos</h1>
      {todos.map((todo, index) => {
        return <p key={index}>{todo}</p>;
      })}
      ;<button onClick={addTodo}>Add Todo</button>
    </>
  );
};

export default memo(Todos);
```


### useMemo

`useCallback`처럼 원하는 게 바뀔 때만 리렌더링되게 할 수 있다. `useCallback`은 함수를 의존한다면, `useMemo`는 값을 의존한다. 


```js
import { useState, useMemo } from "react";
import ReactDOM from "react-dom/client";

const App = () => {
  const [todos, setTodos] = useState([]);
  const [count, setCount] = useState(0);
  const calculation = useMemo(() => expensiveCalculation(count), [count]);

  const addTodo = () => {
    setTodos(() => [...todos, "NEW TODO"]);
  };
  const increment = () => {
    setCount((c) => c + 1);
  };

  return (
    <>
      <div>
        <h1>My Todos</h1>
        {todos.map((todo, index) => {
          return <p key={index}>{todo}</p>;
        })}
        <button onClick={addTodo}>Add Todo</button>
      </div>
      <hr />
      <div>
        Count: {count}
        <button onClick={increment}>+</button>
        <h1>Expensive Calculation</h1>
        {calculation}
      </div>
    </>
  );
};

const expensiveCalculation = (num) => {
  console.log("Calculating...");
  for (let i = 0; i < 10000000; i++) {
    num += 1;
  }
  return num;
};

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);

```


### custom Hook

내가 훅을 직접 만들 수도 있다. `use`로 시작하는 이름을 붙인다.

JSON 페이크 서버를 만들자. 애플리케이션 테스트할 때 아주 유용하다.

다음과 같은 예제를 보자.

```js
import { useState, useEffect } from "react";
import ReactDOM from "react-dom/client";

const Home = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/todos")
      .then((res) => res.json())
      .then((data) => setData(data));
  }, []);

  return (
    <>
      {data &&
        data.map((item) => {
          return <p key={item.id}>{item.title}</p>;
        })}
    </>
  );
};

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Home />);
```

fetch 로직은 다른 컴포넌트에서도 충분히 재사용될 수 있다. 이 부분을 커스텀 훅으로 지정해 보자.(커스텀 훅과 일반 함수는 비슷하다. 그런데 커스텀 훅은 내장 훅을 사용한다. 내장 훅을 사용하지 않는다면 그건 훅이 아니라 일반 함수라고 본다.)

index.js
```js
import useFetch from "./useFetch";
import ReactDOM from "react-dom/client";

const Home = () => {
  const [data] = useFetch("https://jsonplaceholder.typicode.com/todos");

  return (
    <>
      {data &&
        data.map((item) => {
          return <p key={item.id}>{item.title}</p>;
        })}
    </>
  );
};

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Home />);

```


useFetch.js

```js
import { useState, useEffect } from "react";

const useFetch = (url) => {
  const [data, setData] = useState([]);

  useEffect(() => {
    fetch(url)
      .then((res) => res.json())
      .then((data) => setData(data));
  }, [url]);

  return [data];
};

export default useFetch;
```



## Linked-in Clone Coding

redux까지 함께 
```
npx create-react-app linkedin-clone-yt --template redux
```

`yearn start`. npm 쓰고 싶으면 써도 됨.


firebase
1. firebase.google.com에서 'Cloud Firestore'를 통해 데이터베이스 만든다.
2. 'Cloud Firestore'에서 규칙을 'public'으로 만듦. (튜토리얼이기 때문에..)
   `allow read, write;`
3. Authentication에서 이메일 사용을 설정한다.
4. '설정 - 프로젝트 설정'에서 </> 아이콘을 눌러 웹 앱에 firebase를 추가한다.


### visual 
    
.class만 입력하면 엘리먼트가 자동 완성되게 하려면, 다음을 settings.json 파일에 다음을 추가해 준다.

settings.json
```
 "emmet.includeLanguages": { "javascript": "javascriptreact" }
```

아이콘 구하기: material-ui.com
다음으로 설치한다.

```
yarn add @material-ui/core
yarn add @material-ui/icons
```
다음과 같은 오류가 난다..

Module not found: Can't resolve '@mui/material/utils'

<hr />
<b>단축키</b>
* pb10 --> padding-bottom: 10px;
* btlr10 --> border-top-left-radius: 10px;
* df --> display: flex;
* cmd + spacebar: 컴포넌트 자동으로 import해 줌.

