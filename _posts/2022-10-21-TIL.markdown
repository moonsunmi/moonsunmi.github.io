---
layout: post
title: "Likedin Clone Coding"
date: 2022-10-21 12:18:07 +0900
categories: react
---

HeaderOption.js

```js
import { Avatar } from "@mui/material";
import React from "react";
import { useSelector } from "react-redux";
import { selectUser } from "./features/userSlice";
import "./HeaderOption.css";

const HeaderOption = ({ avatar, Icon, title, onClick }) => {
  const user = useSelector(selectUser);

  return (
    <div onClick={onClick} className="headerOption">
      {Icon && <Icon className="headerOption__icon" />}
      {avatar && (
        <Avatar className="headerOption__icon">{user?.email[0]}</Avatar>
      )}
      <h3 className="headerOption__title"> {title}</h3>
    </div>
  );
};

export default HeaderOption;
```

`user?.photoUrl`: user가 없을 수 있기 때문에 optional chaining으로 연결한다.

react-flip-move를 설치한다.

` yarn add react-flip-move`

완성했으면 firebase에 연결하자.

```
firebase login
firebase init
```

옵션은 다음과 같이 선택
? Which Firebase features do you want to set up for this directory? Press Space to select features, then Enter to confirm your choices. <b>Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys</b><br>
? Please select an option: <b>Use an existing project</b><br>
? Select a default Firebase project for this directory: <b>linkedin-clone-yt-85c34 (linkedin-clone-y
t)</b><br>
? What do you want to use as your public directory? <b>build</b><br>
? Configure as a single-page app (rewrite all urls to /index.html)? <b>Yes</b><br>
? Set up automatic builds and deploys with GitHub? <b>No</b><br>

빌드용으로...

```
npm run build
```

이제 배포!

```
firebase deploy
```

## 생활코딩 리액트

리액트의 컴포넌트: 사용자가 정의한 태그를 컴포넌트라고 부른다.

### 설치

그동안 계속 이용해 왔던 Create react app은 앱 이름이었음. npx를 이용해서 해당 앱을 설치한 것. npx는 node.js 기반으로 명령어 환경에서 앱을 쉽게 설치해 주는 소프트웨어이다. npx가 node.js 기반이라 node.js도 설치해야 한다.

`npm install -g create-react-app`

g: global. 어디에서든 create react app을 실행할 수 있도록 하는 옵션이다.

공식 문서에서는 npm이 아니라 npx로 하라고 되어 있다.

> npm vs. npx
> npx는 creat-react-app이라는 프로그램을 임시로 설치해서 딱 한번만 실행시키고 지운다고 생각하면 된다. 공간 낭비가 없고 항상 최신 상태가 될 수 있다(할 때마다 다운로드 받으므로)

### 디렉터리 구조

Create React App을 실행했을 때 나오는 화면은, pulbic/index.html 파일을 실행한 결과이다.

컴포넌트들은 index.html 안의 `<div id = "root"> </div>` 안에 들어가기로 약속되어 있다. 컴포넌트들은 src 디렉터리에 있는 파일에서.

그중에서 특히 앱의 진입점 역할을 하는 파일이 index.js이다.

### 배포

다음과 같이 간단한 예제를 만들어 성능을 살펴보자.

```js
import "./App.css";

function App() {
  return (
    <div className="App">
      <h1>Test and Study</h1>
    </div>
  );
}

export default App;
```

chrome의 inspector에서 network 탭을 눌러서 창을 띄운 후 '캐시 비우고 새로고침'을 누르면, 5MB의 리소스를 다운로드했다고 나온다.

기능 대비 이렇게 많은 리소스를 다운로드한 이유는, 리액트가 개발의 편의성을 위해 여러 가지 기능을 추가해 놨기 때문이다. 이대로 배포할 수는 없다.

사용자용(프로덕션 모드)의 애플리케이션을 만들려면 다음 명령어를 쓴다.

```
npm run build
```

그러면 build 디렉터리 안에 프로덕션 모드의 애플리케이션이 생성된다.

결론적으로, 웹 서버의 Document Root에 build 디렉터리의 파일/폴더를 위치시켜야 한다. Document Root는 웹 서버가 HTML 문서를 찾는 최상위 디렉터리를 말한다.

다음 명령어는 build 디렉터리를 Document Root로 지정해서(-s) 웹 서버를 실행한다.

`npx serve -s build`

### props vs. state

props는 사용자가 컴포넌트를 사용하는 입장에서 중요한 것이고, state는 props 값에 따른 내부 구현에 필요한 데이터다. props는 컴포넌트 사용자에게 중요한 정보로, 사용자가 컴포넌트를 조작할 때 필요하다. 하지만 state는 내부적으로 사용되므로 사용자가 알 필요도 없고 알아서도 안 된다. 외부에서 알아야 하는 것을 공개하고, 알 필요가 없는 건 철저히 숨겨야 한다.

그리고 props는 읽기 전용이고, state는 setState를 이용해서 값을 수정할 수 있다. (Redux를 쓰지 않는다는 전제하에) 상위 컴포넌트가 하위 컴포넌트로 값을 전달할 때는 props를 통해 전달하고, 하위 컴포넌트가 상위 컴포넌트의 값을 바꾸고 싶다면 이벤트를 사용한다. props는 읽기 전용이라 변경할 수 없다.

> Redux: 데이터를 각 컴포넌트에 분산해서 저장하는 게 아니라 하나의 데이터 저장소를 두고, 그 저장소 안에 있는 값이 바뀌면 모든 컴포넌트의 값도 알아서 바뀌게 하는 기술

#### setState

state 값을 직접 변경하면 안 되고, setState를 이용해야 값이 변했다는 걸 리액트가 알 수 있다. 리액트가 알아야 화면에 바뀐 정보가 업데이트된다. setState가 호출되면 값을 바꾸는 것 외에 내부적으로 더 많은 일들이 일어난다.

### 이벤트

리액트에서는 이벤트 함수가 호출될 때 첫 번째 매개변수의 값으로 event라는 객체를 주입하기로 약속되어 있다.

(원하는 곳까지만 코드를 실행시키고 싶다면 `debugger;`를 입력함.)

a 태그는 이벤트를 걸면, 기본적으로 refresh를 한다. 그래서 이 동작을 막기 위해서 `e.preventDefault`를 하는 것이다.(그래서 default를 막는다는 표현을 쓴 건가 보다.)

이벤트 객체 내에 굉장히 중요한 속성이 하나 있다. target이라는 속성이다. e.target은 이벤트를 발생한 엘리먼트를 가리킨다.

다음과 같이 이벤트가 발생했을 때, 실행되는 함수를 이벤트 핸들러라고 부른다.

```
onClick = {... 함수 ... }
```
