---
layout: post
title: "w3school Javascript"
date: 2022-10-04 12:18:07 +0900
categories: javascript
---

### Javascript closure

자바스크립트의 변수는 글로벌 변수 혹은 로컬 변수가 될 수 있다. 이때 글로벌 변수는 클로저를 이용하면 로컬 변수로 바꿀 수 있다.

함수 안에 있더라도 let, var, const를 써주지 않으면 a는 글로벌 변수이다.

```js
function myFunction() {
  a = 4;
}
```

글로벌 변수를 쓰지 않고 counter 딜레마를 해결하는 법

```js
function add() {
  let counter = 0;
  function plus() {
    counter += 1;
  }
  plus();
  return counter;
}
```

재귀 함수로

```js
const add = (function () {
  let counter = 0;
  return function () {
    counter += 1;
    return counter;
  };
})();
```

### Class 상속

Model이 Car 상속 받을 때

```js
class Car {
  constructor(brand) {
    this.carname = brand;
  }
  present() {
    return "I have a " + this.carname;
  }
}

class Model extends Car {
  constructor(brand, mod) {
    super(brand);
    this.model = mod;
  }
  slow() {
    return this.present() + this.model;
  }
}
```

#### Getter/Setter

getter/setter는 겉으로 프로퍼티처럼 보인다. 실제 프로퍼티와 구별하기 위해서 해당 프러퍼티에 언더바를 붙인다.

```js
class Car {
  constructor(brand) {
    this._carname = brand;
  }
  get carname() {
    // set과 같은 이름
    return this._carname;
  }
  set carname(x) {
    // get과 같은 이름
    this._carname = x;
  }
}
let myCar = new Car("Ford");
myCar.carname; // getter
myCar.carname = "Volvo"; // setter
```

### 클래스 static

static 메서드: '오브젝트 클래스'용 메서드. '오브젝트'용 메서드로 호출할 수 없다.

```js
class Car {
  constructor(name) {
    this.name = name;
  }
  static hello() {
    return "Hello!!";
  }
}

let myCar = new Car("Ford");

Car.hello(); // O
myCar.hello(); // X
Car.hello(myCar); // O
```

### JS 콜백

(함수의 실행 순서에 대한 것)
콜백은 다른 함수에 argument로 넘겨지는 함수이다.

```js
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}
function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}
myCalculator(5, 5, myDisplayer);
```

- 함수를 argument로 전달할 때 여닫는 괄호를 쓰지 않는다.!

이 콜백 함수는 비동기 함수에서 진가를 드러낸다.

### 비동기

비동기 상황에서 이용하다. (어떤 함수가 다른 함수 뒤에 실행되어야 한다거나 할 때...)

예를 들어, 그림이 제대로 로딩되면 그림을 보여주고, 아니라면 에러 메시지를 띄워줄 수 있다.

```js
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}
function getFile(myCallback) {
  let req = new XMLHttpRequest();
  req.open("GET", "mycar.html");
  req.onload = function () {
    if (req.status == 200) {
      myCallback(this.responseText);
    } else {
      myCallback("Error: " + req.status);
    }
  };
  req.send();
}

getFile(myDisplayer);
```
