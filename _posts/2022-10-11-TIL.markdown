---
layout: post
title: "w3school React"
date: 2022-10-11 12:18:07 +0900
categories: react
---

### JSX

JSX: JavaScript XML. React 안에 HTML을 쓸 수 있게 한다.

JSX에서 식은 {}로 감싸서 쓴다.

긴 줄은 다음과 같이 쓰면 된다.

```js
const myElement = (
  <ul>
    <li>Apples</li>
    <li>Bananas</li>
    <li>Cherries</li>
  </ul>
);

const root = ReactDOM.creatRoot(document.getElementById("root"));
root.render(myElement);
```

HTML 코드는 꼭 단 '하나'의 top 레벨 엘리먼트로 감싸져야 한다. 여러 개의 엘리먼트를 쓰고 싶다면 `<>...</>`로 감싸도 된다.

비어 있는 엘리먼트는 다음과 같이 닫아 준다.

```js
const myElement = <input type="text" />;
```

#### JSX에서의 규칙

- JSX에서는 class 대신에 className을 써준다.
- if문을 쓸 수 없으므로, ternary expression을 쓴다. (`x>10? 'big': 'small'`)

### React Components

컴포넌트는 HTML 엘리먼트를 반환하는 함수와 같다. `<h2>` HTML 엘리먼트를 반환하는 `Car` 컴포넌트.

```js
function Car() {
  return <h2>Hi, I'm a Car!</h2>;
}
```

이제 이 컴포넌트는 `<Car />`라는 평범한 HTML처럼 이용할 수 있다.

```js
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Car />);
```

`props`는 함수의 arguments처럼 다른 컴포넌트의 attribute로 보내 줄 수 있다.

```js
function Car(props){
  return <h2>I am a {props.color} car! </h2>;
}

const root = ReactDOM.createRoot(document.getElementById('root));
root.render(<Car color="red" />);
```

이 컴포넌트들 import/export할 수 있다.

### React Props

props는 컴포넌트 안으로 전달되는 arguments들이다. props는 HTML attribute를 통해서 컴포넌트의 프러퍼티로 전달된다.

```js
function Car(props) {
  return <h2>I am a {props.brand} car! </h2>;
}

function Garage() {
  return (
    <>
      <h1>Who lives in my garage?</h1>
      <Car brand="Ford" />
    </>
  );
}
const root = ReactDOM.creatRoot(document.getElementById("root"));
root.render(<Garage />);
```

### React Events

리액트는 HTML과 같은 이벤트들을 가집니다. 클릭, 변경 등등...

- 리액트 이벤트는 camelCase 문법으로 표기한다. onclick이 아니라 `onClick`.
- 리액트 이벤트 핸들러는 onClick="shoot()"이 아니라 `onClick={shoot}`

```js
function Football() {
  const shoot = () => {
    alert("Great Shot!");
  };
  return <button onClick={shoot}>Take the shot!</button>;
}
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Football />);
```

#### arguments 전달하기

```js
function Football() {
  const shoot = (what) => {
    alert(what);
  };
  return <button onClick={shoot("Goal")}>Take the shot!</button>;
}
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Football />);
```

### 선택적으로 동작하기

리액트에서는 컴포넌트를 선택적으로 렌더링할 수 있다.

```js
function Goal(props) {
  if (props.isGoal) {
    return <MadeGoal />;
  }
  return <MissedGoal />;
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Goal isGoal={false} />);
```

`{ }`를 이용하면 JSX 안에 자바스크립트 문법을 사용할 수도 있다.

```js
function Garage(props) {
  const cars = props.cars;
  return (
    <>
      <h1>Garage</h1>
      {cars.length > 0 && <h2> You have {cars.length} cars. </h2>}
    </>
  );
}
const cars = ["Ford", "BMW", "Audi"];
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Garage cars={cars} />);
```

```js
function Goal(props) {
  const isGoal = props.isGoal;
  return <>{isGoal ? <MadeGoal /> : <MissedGoal />}</>;
}
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Goal isGoal={false} />);
```

### Lists

```js
function Car(props) {
  return <li>I am a {props.brand}</li>;
}

function Garage() {
  const cars = ["Ford", "BMW", "Audi"];
  return (
    <>
      <h1>Who lives in the garage?</h1>
      <ul>
        {cars.map((car) => (
          <Car brand={car} />
        ))}
      </ul>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Garage />);
```

#### Keys

Key는 리액트가 엘리먼트를 계속 뒤를 밟게 해 준다. list에서 어떤 아이템이 수정되었을 때, list 전부를 다시 render하는 게 아니라, 수정된 것만 다시 render한다.

```js
function Car(props) {
  return <li>I am a { props.brand }</li>;
}

function Garage() {
  const cars = [
    {id: 1, brand: 'Ford'},
    {id: 2, brand: 'BMW'},
    {id: 3, 'Audi'}
  ];
  return (
    <>
      <h1>Who lives in the garage?</h1>
      <ul>
        { cars.map((car) => <Car key={car.id} brand={car.brand} />) }
      </ul>
    </>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage />);
```

### React Forms

HTML에서는 form data가 DOM에 의해 핸들링된다.
리액트에서는 form data가 컴포넌트에 의해 핸들링된다.

컴포넌트에 의해 데이터가 핸들링될 때는 모든 데이터가 컴포넌트 state에 저장되어 있어야 한다.(useState) onChange attribute 안에 이벤트 핸들러를 추가해서 변화를 컨트롤할 수 있다.

```js
import { useState } from "react";

function MyForm(){
  const [name, setName] = useState("");

  return(
    <form>
      <input
        type="text"
        value={name}
        onChange={(e)=> setName(e.target.value)}
    </form>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<MyForm />);
```

<hr>
ternary: 셋으로 이루어지는 세 개의, 세 겹의
