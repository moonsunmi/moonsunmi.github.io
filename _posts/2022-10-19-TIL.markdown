---
layout: post
title:  "Likedin Clone Coding"
date:   2022-10-19 12:18:07 +0900
categories: react
---

| (달성/목표) | 뽀모도리  | 등   | 가슴  | 배   |
|----|-------|-----|-----|-----|
| 1일 | 7/5   | 5/5 | 5/5 | 3/3 |
| 1주 | 15/40 |     |     |


리스트에 key를 꼭 넣어야 전부 리스트의 원소를 전부 다 렌더링하지 않게 된다.

```js
{posts.map(({ id, data: { name, description, message, photoUrl } }) => (
  <Post
    key={id}
    name={name}
    description={description}
    message={message}
    photoUrl={photoUrl}
  />
))}
```

새 글이 먼저 나오게 했다. (오름차순(ASC), 내림차순(DESC))

```js
  useEffect(() => {
    db.collection("posts")
      .orderBy("timestamp", "desc")
      .onSnapshot((snapshot) =>
        setPosts(
          snapshot.docs.map((doc) => ({
            id: doc.id,
            data: doc.data(),
          }))
        )
      );
  }, []);
```


### Redux

nested component가 있을 때, 이 컴포넌트에 여러 군데서 접근하고 싶다고 가정하자. 그런데 그럴 때마다 계속 props를 전달해 준다면, 관리하기도 어렵고 여러 문제가 생길 수 있다. Redux를 써야 할 때가 되었다.

'src/app'에 있는 store.js에서 다음과 같이 변경한다. user 정보를 다룰 것이라서 user로 바꾸었음.

```js
import { configureStore } from "@reduxjs/toolkit";
import userReducer from "../features/userSlice";

export const store = configureStore({
  reducer: {
    user: userReducer,
  },
});
```

'src/features/Counter' 경로에서 counterSlice.js 파일을 'src/features'로 옮겨옴. 나머지 파일은 삭제한다.

couterSlice.js 이름을 userSlice.js로 바꾸어 원하는 기능으로 수정하자.

지금의 컴포넌트를 트리 구조로 나타내 본다면 다음과 같다.

App.js
ㄴLogin.js
ㄴFeed.js ..
  ㄴPost.js

App.js가 먼저 렌더링된 다음, App.js가 Login.js, Feed.js를 각각렌더링한다.  Feed.js는 Post.js를 렌더링한다. 

로그인을 해서 user 오브젝트를 Post.js에서 쓸 수 있게 하려면, Login.js -> App.js -> Feed.js -> Post.js로 옮겨 줘야 한다.

이러한 현상을 Prop Drilling이라고 한다. 이를 해결하기 위해서 redux를 사용한다. redux는 App.js, Login.js, Feed.js, Post.js를 전부 감싸고 있다. redux를 사용하면, Login.js의 user 오브젝트를 Post.js에서 한번에 가져올 수 있다.

그렇다고 모든 정보를 다 가지고 있을 순 없으니 슬라이스를 이용한다. userSlice, themeSlice ... 

Action은 다음의 포맷을 가진 오브젝트

```
{
  type: "액션의 종류를 한번에 식별할 수 있는 문자열 혹은 심벌",
  payload: "액션의 실행에 필요한 임의의 데이터"
}
```

redux의 정보를 가져오는 셀렉터.

```js
export const selectUser = (state) => state.user.user;
```



userSlice.js
```js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  user: null,
  status: "idle",
};

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    login: (state, action) => {
      state.value = action.payload;
    },
    logout: (state) => {
      state.user = null;
    },
  },
});

export const { login, logout } = userSlice.actions;

export const selectUser = (state) => state.user.user;

export default userSlice.reducer;

```

Login.js

```js
import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { auth } from "./firebase";
import { login } from "./features/userSlice";
import "./Login.css";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [profilePic, setProfilePic] = useState("");
  const dispatch = useDispatch();

  const loginToApp = (e) => {
    e.preventDefault();
  };
  const register = () => {
    if (!name) {
      return alert("Please enter a full name");
    }

    auth
      .createUserWithEmailAndPassword(email, password)
      .then((userAuth) => {
        userAuth.user
          .updateProfile({
            displayName: name,
            photoURL: profilePic,
          })
          .then(() => {
            dispatch(
              login({
                email: userAuth.user.email,
                uid: userAuth.user.uid,
                displayName: name,
                photoURL: profilePic,
              })
            );
          });
      })
      .catch((error) => alert(error.message));
  };
  return (
    <div className="login">
      <img
        src="https://drive.google.com/uc?export=view&id=1Dzj13Z4QVrId9uLmYezBH6mjp3Ihm5xR"
        alt=""
      />
      <form>
        <input
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Full name (required if registering)"
          type="text"
        />
        <input
          value={profilePic}
          onChange={(e) => setProfilePic(e.target.value)}
          placeholder="Profile pic URL(optional)"
          type="text"
        />
        <input
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email"
          type="email"
        />
        <input
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Password"
          type="password"
        />

        <button type="submit" onClick={loginToApp}>
          Sign In
        </button>
      </form>

      <p>
        Not a memeber?{" "}
        <span className="login__register" onClick={register}>
          Register Now
        </span>
      </p>
    </div>
  );
};

export default Login;
```


<hr />
<h5>visual studio code 단축키</h5>
* 단어 한꺼번에 바꾸기: command+shift+L
