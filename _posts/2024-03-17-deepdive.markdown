---
layout: post
title: "React deep dive) 리액트 훅(useContext, useReducer)"
date: 2024-03-17 12:28:07 +0900
tags: deepdive
---

### useContext

useContext는 전역 상태 관리의 복잡성을 줄여주기 위해서 사용된다.

부모 컴포넌트에서 자식 컴포넌트로 필요한 props를 계속 전달해 주는 걸 방지하고자 저장소를 따로 마련한 후, 그것에 대한 접근을 어느 컴포넌트에서든 허용할 수 있게 해 준다.

그런데 `useContext` 내부에서 해당 콘텍스트가 존재하지 않을 때 접근하려고 하는 경우가 종종 생겨 에러가 발생할 수 있다. 컨텍스트의 접근은 provider로 감싸진 곳에서만 가능하다.

따라서 provider와 useContext를 자주 사용할 예정이라면, 커스텀 훅으로 만들어 두는 게 좋다. 커스텀 provider에는 타입을 지정해 주고, 커스텀 useContext에는 provider로 감싸지지 않았을 경우의 에러 처리를 담는다.

```tsx
const MyContext = createContext<{ hello: string } | undefined>(undefined);

function ContextProvider({
  text,
  children,
}: PropsWithChildren<{ text: string }>) {
  return (
    <MyContext.Provider value={{ hello: text }}>{children}</MyContext.Provider>
  );
}

function useMyContext() {
  const context = useContext(MyContext);
  if (context === undefined) {
    throw new Error("useMyContext는 Context 내부에서만 사용할 수 있습니다.");
  }
  return context;
}
```

기억해야 할 건, `useContext`는 상태를 사용할 수 있을 뿐, 최적화에 도움이 되지는 않는다는 점이다. useContext를 썼다고 불필요한 렌더링을 막을 수 있는 건 아니다.

### useReducer

상태를 업데이트할 때, 미리 정의해둔 dispatcher에 의해서만 작동할 수 있도록 해 둔다. 이전 상태에 의해서 영향을 받거나 할 경우에 사용한다.

```tsx
function reducer(state: State, action: Action): State {
  switch (action.type) {
    case "up":
      return { counter: state.counter + 1 };
    case "down":
      return { counter: state.counter - 1 };
    case "reset":
      return { counter: 0 };
    default:
      throw new Error("unexpeced Error");
  }
}

export default function App() {
  const [state, dispatch] = useReducer(reducer, initialState, init);

  function handleUpButtonClick() {
    dispatch({ type: "up" });
  }
```
