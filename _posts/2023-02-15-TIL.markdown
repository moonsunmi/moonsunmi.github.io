---
layout: post
title: "TIL) DRF - 다양한 뷰"
date: 2023-02-15 12:18:07 +0900
tags: DRF Django
---

### 함수 기반 뷰

함수 기반 뷰(Function Based View, FBV) + 데코레이터

```python
@api_view(['GET', 'POST'])
def booksAPI(request):
    if request.method == 'GET':
        books = Book.objects.all()
        serializer = BookSerializer(books, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    elif request.method == 'POST':
        serializer = BookSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
def bookAPI(request, ISBN):
    book = get_object_or_404(Book, ISBN=ISBN)
    serializer = BookSerializer(book)
    return Response(serializer.data, status=status.HTTP_200_OK)
```

### 클래스 기반 뷰

클래스 기반 뷰(Class Based View, CBV) + APIView 상속

```python
class BooksAPI(APIView):
    def get(self, request):
        books = Book.objects.all()
        serializer = BookSerializer(books, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def post(self, request):
        serializer = BookSerializer(data=request.data)  # 역직렬화
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class BookAPI(APIView):
    def get(self, request, ISBN):
        book = get_object_or_404(Book, ISBN=ISBN)
        serializer = BookSerializer(book)
        return Response(serializer.data, status=status.HTTP_200_OK)
```

### mixin

`request`의 메서드(`get`, `post`)마다 반복되는 시리얼라이즈 코드를 클래스 레벨에서 하도록 한다.

```python
class BooksAPIMixins(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)


class BookAPIMixins(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
    lookup_field = 'ISBN'

    def get(self, request, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)

    def put(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)

    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)
```

## generics

mixin을 여러 개 상속받는 대신, 일종의 mixin 조합을 사용한다.

```python
class BooksAPIGenerics(generics.ListCreateAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer


class BookAPIGenerics(generics.RetrieveUpdateDestroyAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
    lookup_field = 'ISBN'
```

### ViewSet & Router

Create, Retrieve, Update, Destroy, List 기능을 다 갖춘 ModelViewSet.

```python
class BookViewSet(viewsets.ModelViewSet):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
```

Router와 함께 사용하면 URL도 자동으로 등록된다.

```python
router = routers.SimpleRouter()
router.register('books', BookViewSet)
urlpatterns = router.urls
```
