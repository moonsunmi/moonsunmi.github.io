---
layout: post
title: "React deep dive) Next.js 데이터 불러오기"
date: 2024-03-28 12:28:07 +0900
tags: deepdive
---

### getStaticPath와 getStaticProps

블로그 약관처럼 누구에게나 같은 페이지를 보여주고자 할 때 사용되는 함수다.

```tsx
export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [{ params: { id: "1" } }, { params: { id: "2" } }],
    fallback: false,
  };
};
```

`getStaticPaths`는 path에 등록된 1, 2만 유효하다. 나머지 3, 4, 5, .. 등등은 404를 반환한다.

빌드를 할 경우 사용자가 접근할 수 있는 페이지를 모조리 만들어 둔다.

```
/pages/[id]
  /pages/1
  /pages/2
```

`fallback`의 경우 미리 빌드해야 할 페이지가 너무 많을 경우 어떻게 대처할지를 정한다.

### getServerSideProps

서버에서 실행되는 함수이며, 해당 함수가 있다면 무조건 페이지 진입 전에 이 함수를 실행한다.

응답값에 따라서 페이지의 루트 컴포넌트에 `props`를 반환할 수도, 다른 페이지로 리다이렉트시킬 수도 있다.

이 실행이 끝나기 전까지는 사용자에게 어떠한 HTML도 보여줄 수 없기 때문에, 최초에 꼭 보여줘야 하는 데이터만 담는 게 좋다. 나머지는 클라이언트에서 호출하도록 한다.

#### `__NEXT_DATA__`

`__NEXT_DATA__`는 이 이름으로 id가 지정된 script 안에 JSON 형식으로 존재한다. 여기에는 props, 현재 페이지 정보, query 등 Next.js 구동에 필요한 다양한 정보가 담겨 있다.

이 데이터는 서버에서 생성된 페이지의 초기 상태 정보를 클라이언트에 전달하는 역할을 한다. 클라이언트는 이 정보를 기반으로 hydrate 작업을 수행한다. hydrate로 만든 리액트 컴포넌트 트리와 서버에서 만든 HTML이 다르면 불일치 에러를 낸다.

클라이언트에서도 비교를 위해 렌더링 작업을 하기는 하지만, 서버에서 외부 API 요청 등으로 얻은 데이터들을 다시 얻기 위해 또 요청할 필요는 없다. 서버에서 이 데이터들을 `__NEXT_DATA__`에 담아 주기 때문이다.

Next.js에서는 이 정보를 window 객체에도 저장해 둔다. `window.__NEXT_DATA__`

### getInitialProps

`getStaticProps`와 `getServerSideProps`가 나오기 전에 있었던 것. 가급적 사용하지 않도록 하며, 그것도 `_app.tsx`나 `_error.tsx`처럼 사용이 제한되어 있는 페이지에서만 사용.
