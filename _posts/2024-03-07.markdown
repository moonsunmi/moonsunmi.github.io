---
layout: post
title: "React deep dive) 자바스크립트의 동등 비교"
date: 2024-03-07 12:18:07 +0900
tags: post deepdive
---

자바스크립트에서 동등 비교를 할 때 보통 `==`나 `===`를 쓴다.

`==` 같은 경우 형 변환을 자동으로 해주고 비교하기 때문에 `5=='5'`처럼 타입이 다르더라도 `true`로 판단한다.

`===`는 표시되는 값이 같더라도 타입이 다르면 같은 값으로 판단하지 않는다. 이 비교는 `NaN`과 `-0/+0` 처리 방식에서 아쉬운 부분이 있는데, `Object.is()`는 이를 보완한 비교를 할 수 있다.

#### 자바스크립트의 타입

자바스크립트에는 원시 타입과 객체 타입이 있다. 객체 타입을 제외한 타입을 전부 원시 타입으로 보는데, 객체 타입에는 배열, 함수, 정규식, 클래스 등이 포함된다.

원시 타입은 객체가 아니기 때문에 메서드를 갖지 않으며, 불변 형태로 값이 저장된다.

백틱을 이용한 문자열을 템플릿 리터럴이라고 한다. 자바스크립트에서 문자열은 원시 타입이며, 변경 불가능하다.

ES6에서 새롭게 추가된 타입이 있다. Symbol 타입. 중복되지 않는 고유의 값을 나타내기 위한 타입이다.

```
const key1 = Symbol(‘key’)
const key2 = Symbol(‘key’)
key1 === key2 // false
```

값 자체의 비교를 위해서는 다음과 같이 한다.

```
const key1 = Symbol.for('key');
const key2 = Symbol.for('key');
key1 === key2; // true
```

객체 타입은 프러퍼티가 삭제, 추가, 수정될 수 있으므로 가변이다. 값을 복사할 때도 참조 형태로 전달한다.

### props 비교 시 객체와 타입

리액트에서는 비교 시, `Object.is`로 값을 비교한 후 객체 간 얕은 비교를 한다. 얕은 비교란, 객체의 프로퍼티가 다른 객체를 가르킬 때, 그 내부까지는 비교하지 않는다는 뜻이다.

`props`에 원시 타입의 값을 전달하지 않고, 객체를 전달한다면 얕은 비교로는 객체의 변화 유무를 알 수 없다. 객체 안의 프러퍼티 값이 바뀌었는지까지 확인해야 하는데, 얕은 비교 때는 체크되지 않는 부분이다.

그래서 `props`로 객체를 전달한다면, `memo`를 이용해 값이 바뀔 때만 렌더링되도록 했음에도 불구하고, 바뀌었는지 몰라서 매번 렌더링하게 된다.
