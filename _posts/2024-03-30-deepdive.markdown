---
layout: post
title: "React deep dive) 리액트 상태 관리의 역사"
date: 2024-03-30 12:28:07 +0900
tags: deepdive
---

### 리액트 상태 관리의 역사

#### Flux 패턴

데이터의 흐름을 단방향으로만 제한하는 것

- 액션: 어떠한 작업을 처리할 액션과 그 액션을 발생 시 포함시킬 데이터. 액션 타입과 데이터를 각각 정의해 디스패처로 보낸다.
- 디스패처: 액션(타입과 데이터)을 스토어에 보낸다.
- 스토어: 실제 상태에 따른 값과 상태를 변경할 수 있는 메서드를 가진다. 타입에 따라 어떻게 이를 변경할지 정의되어 있다.
- 뷰: 스토어에서 만들어진 데이터를 가져와 화면에 렌더링한다.

#### 리덕스의 등장

Flux 구조로 데이터 흐름을 단방향으로 하되, Elm 아키텍처를 도입했다.

- 모델: 애플리케이션의 상태
- 뷰: 모델을 표현하는 HTML
- 업데이트: 모델을 수정하는 방식

### Recoil, Jotai, Zustand

Recoil과 Jotai는 Context, Provider, 훅을 기반으로하여 작은 상태를 효율적으로 관리하는 라이브러리이다. Zustand는 리덕스처럼 하나의 큰 스토어를 기반으로 한다.

Recoil: 아직 실험 단계.

## 디버깅

react-dev-tool

### Profiler 탭

General 탭의 Highlight updates when components render
Debuggint 탭의 Hide logs during second render in Strict Mode: console이 두 번씩 찍히는 걸 막고 싶다면 체크 해제
Profiler 탭의 Record why each component rendered while profiling

## 웹 애플리케이션 환경의 기본적인 디버깅

- 요소 탭: HTML, CSS 정보 등을 확인할 수 있다.
- 소스 탭: 자바스크립트, 리액트 파일 등에 중단점을 걸어 디버깅할 수 있다.
- 네트워크 탭: 네트워크 요청에 관한 기록이 되어 있다. 리소스 크기가 너무 큰 걸 발견하면 gzip이나 brotli로 압축하거나 이미지를 최적화할 필요가 있다.
  - 불필요한 요청, 중복 요청은 없는지
  - 웹페이지 구성에 필요한 리소스 크기가 너무 크지 않은지
  - 리소스 불러오는 속도가 너무 느리진 않은지
  - 리소스가 다운로드되는 순서가 적당하여 자연스러운지

## Next.js 환경 디버깅하기

1. packeg.json에 다음과 같이 debug 옵션을 세팅한다.

```json
"scripts": {
  "dev": "next dev",
  "debug": "NODE_OPTIONS='--inspect' next dev"
}
```

2. yarn debug를 이용해 디버그 모드로 실행 시킨다.

3. chrome://inspect로 들어가서 'open dedicated DevTools for Node'를 클릭한다.

4.
