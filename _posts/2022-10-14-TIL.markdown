---
layout: post
title: "w3school React"
date: 2022-10-14 12:18:07 +0900
categories: react
---

#### useEffect Hook

useEffect란 컴포넌트가 렌더링될 때 특정 작업을 실행할 수 있도록 하는 Hook이다.

컴포넌트 안에서 사이드 이펙트를 실행시킨다. 여기서 사이드이펙트란, 데이터를 가지고 오거나 DOM을 직접 업데이트하거나 타이머를 작동시키는 것.

useEffect는 두 개의 argument를 받는데, 두 번째 argument는 optional이다.

```js
useEffect(<function>, <dependency>);
```

Timer를 보자.

```js
import { useState, useEffect } from "react";
import ReactDom from "react-dom/client";

function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    setTimeout(() => {
      setCount((count) => count + 1);
    }, 1000);
  });

  return <h1>I've rendered {count} times!</h1>;
}

const root = ReactDom.createRoot(document.getElementById("root"));
root.render(<Timer />);
```

render가 될 때마다 useEffect가 실행된다. 그말은 count가 변경될 때마다, render가 되고, 또 다른 useEffect가 실행된다는 것.

> dependency 전달하는 세 가지.
>
> ```js
> useEffect(() => {}); // 전달 안 함.
> useEffect(() => {}, []); // 빈 배열 전달
> useEffect(() => {}, [prop, state]); // prop과 state 전달.
> ```

첫 렌더링될 때 한 번만 effect가 실행되도록 바꾸려면, `useEffect()`의 dependency를 설정해 주면 된다.

```js
useEffect(() => {
  setTimeout(() => {
    setCount((count) => count + 1);
  }, 1000);
}, []); // 빈 array로 dependency를 추가해 주었다.
```

다음처럼, count에 calculation이 의존한 상황이라면(count가 바뀔 때 calculation이 바뀜) 의존성을 count로 전달해 준다. 이때도, 배열 형태로 전달해 준다는 걸 잊지 말자.

```js
import { useState, useEffect } from "react";
import ReactDOM from "react-dom/client";

function Counter() {
  const [count, setCount] = useState(0);
  const [calculation, setCalculation] = useState(0);

  useEffect(() => {
    setCalculation(() => count * 2);
  }, [count]);

  return (
    <>
      <p>Count: {count}</p>
      <button onClick={() => setCount((count) => count + 1)}>+</button>
      <p>Calculation: {calculation}</p>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Counter />);
```

#### Effect Cleanup

메모리 누수를 줄이기 위해서 필요 없어진 effect는 없애준다. 여기에서 timeout은 한번 효과를 준 후 이후에는 쓸모 없으므로 삭제해 준다. 삭제하기 위해서는 timeout에 이름을 지정해 주어야 한다.

```js
import { useState, useEffect } from "react";
import ReactDOM from "react-dom/client";

function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    let timer = setTimeout(()=> {  // 지워줄 timer에 이름 지정해줌.
      setCount((count) => count + 1));
    }, 1000);
    return () => {clearTimeout(timer)};  // return으로 clear
  }, []);

  return <h1>I've rendered {count} times!</h1>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Timer />);
```

### useContext Hook

useContext는 state를 globally하게 관리하기 위한 것이다. useState는 자기혼자 쓰일 때보다 useContext와 함께 쓰일 때 훨씬 사용하기 편리하다.

컴포넌트 안에 포함된 컴포넌트 안에 포함된 컴포넌트에 인자가 쓰인다면, 중간 컴포넌트들이 인자를 계속 전달해 줘야 한다. useState는 최상위 컴포넌트에서만 쓰일 수 있으므로! 상당히 불편하다. 이때 context를 생성해서 사용한다.

```js
import { useState, useContext, createContext } from "react";
import ReactDOM from "react-dom/client";

const UserContext = createContext();

function Component1() {
  const [user, setUser] = useState("sunmi");

  return (
    <UserContext.Provider value={user}>
      <h1>{`Hello, ${user}`}</h1>
      <Component2 />
    </UserContext.Provider>
  );
}

function Component2() {
  return (
    <>
      <h1>Component2</h1>
      <Component3 />
    </>
  );
}

function Component3() {
  const userName = useContext(UserContext);
  return <h1>{`Hello, ${userName}`}</h1>;
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Component1 />);
```

### useRef

1. 리렌더링 막기.
2. DOM에 직접 접근하기
3. State의 변화 추적하기

#### 리렌더링 막기

useState로 어플리케이션이 얼마나 렌더링되었는지 확인해 보면, 무한대값이 나오는 것을 확인할 수 있다. 훅 자체가 계속 다시 렌더링하기 때문이다. 이를 막기 위해서 useRef를 사용한다.

다음과 같이 useState를 하면 리렌더링이 계속 일어나나 보다...?

```js
import { useState, useRef, useEffect } from "react";
import ReactDOM from "react-dom/client";

function App() {
  const [inputValue, setInputValue] = useState("");
  const [count, setCount] = useState(0);

  useEffect(() => {
    setCount((count) => count + 1);
  }, [inputValue]);
  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h1>Render Count: {count}</h1>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
```

여튼 useRef를 써 보자.

```js
import { useState, useRef, useEffect } from "react";
import ReactDOM from "react-dom/client";

function App() {
  const [inputValue, setInputValue] = useState("");
  const count = useRef(0);

  useEffect(() => {
    count.current = count.current + 1;
  });
  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h1>Render Count: {count.current}</h1>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
```

#### DOM에 직접 접근하기

리액트에서는 엘리먼트에 ref 속성을 추가하면, DOM에 직접 접근할 수 있다.

```js
import { useRef } from "react";
import ReactDOM from "react-dom/client";

function App() {
  const inputElement = useRef();

  const focusInput = () => {
    inputElement.current.focus();
  };
  return (
    <>
      <input type="text" ref={inputElement} />
      <button onClick={focusInput}>Focus Input</button>
    </>
  );
}
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
```

#### State 변화 추적하기

`useRef`를 쓰면 state의 이전 값을 계속 추적할 수 있다.

```js
import { useEffect, useRef, useState } from "react";
import ReactDOM from "react-dom/client";

function App() {
  const [inputValue, setInputValue] = useState("");
  const previousValue = useRef();

  useEffect(() => {
    previousValue.current = inputValue;
  }, [inputValue]);

  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h2>Current Value:{inputValue}</h2>
      <h2>Previous Value: {previousValue.current}</h2>
    </>
  );
}
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
```

### useReducer

useReducer는 useState와 비슷하다. 여러 state를 계속 추적해야 한다면, useReducer가 유용할 것이다.

`useReducer(<reducer>, <initialState>)`

- reducer: 내가 직접 만든 state 로직
- initialState: 초기값을 가진 state. 일반적으로 오브젝트 형태이다.

```js
import { useReducer } from "react";
import ReactDOM from "react-dom/client";

const initialTodos = [
  {
    id: 1,
    title: "Todo 1",
    complete: false,
  },
  {
    id: 2,
    title: "Todo 2",
    complete: false,
  },
];

const reducer = (state, action) => {
  switch (action.type) {
    case "COMPLETE":
      return state.map((todo) => {
        if (todo.id === action.id) {
          return { ...todo, complete: !todo.complete };
        } else {
          return todo;
        }
      });
    default:
      return state;
  }
};

function Todos() {
  const [todos, dispatch] = useReducer(reducer, initialTodos);

  const handleComplete = (todo) => {
    dispatch({ type: "COMPLETE", id: todo.id });
  };
  return (
    <>
      {todos.map((todo) => (
        <div key={todo.id}>
          <label>
            <input
              type="checkbox"
              checked="false"
              onChange={() => handleComplete(todo)}
            />
            {todo.title}
          </label>
        </div>
      ))}
    </>
  );
}
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Todos />);
```

<hr>
useReducer 뭔지 잘 모르겠다!
