---
layout: post
title: "TIL) CORS 에러와 Django에서 해결"
date: 2023-07-28 12:18:07 +0900
tags: Django post
---

프론트에서 다음과 같은 CORS 에러가 발생했다.

```
Access to XMLHttpRequest at 'https://...' from origin 'http://localhost:3000' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
```

여기서 CORS는 Cross-Origin Resource Sharing 교차 출처 리소스 공유 정책을 말한다.
origin은 출처를 말하는데, protocol + host(사이트 도메인) + 포트번호
즉, 나의 경우는 http://localhost:3000

공유 정책에는 Same Origin 정책과 Cross Origin 정책이 있고, 그 정책들은 HTTP 요청에 따라 다른 정책으로 지원한다.

SOP는 동일 출처 정책으로, 동일한 출처에서만 리소스를 공유할 수 있다. 동일 출처가 아닌 경우 접근을 차단하는 정책. 다른 사이트에서 리소스를 가져오지 않으니 해커의 공격에 조금 더 안전하다.

여기서 출처의 비교는 브라우저에서 한다. 그래서 네트워크 탭에서는 요청 정보가 제대로 보이는데, CORS 에러는 뜨게 된다.

당연히 동일 출처의 리소스만 사용하는 것에는 한계가 있다. 그래서 SOP에서 예외 사항을 두었는데, 그중에 하나가 바로 CORS 교차 출처 리소스 공유 정책.
SOP 정책을 위반하더라도 CORS 정책을 지키면 다른 출처의 리소스도 사용 가능하게 된다.

클라이언트에서 서버에 요청 시, 요청 헤더에 origin 정보를 함께 보낸다. 그리고 서버에서 응답 시, 응답 헤더에 Access-Control-Allow-Origin 정보를 함께 보낸다.

브라우저에서는 이 둘을 비교하여 접근을 차단할지 말지 정한다.

Django에서는 Access-Controll-Allow-Origin을 Django-cors-headers를 사용해서 추가할 수 있다.

setting을 다음과 같이 해 주면, 교차 출처 리소스를 무조건 가져올 수 있다. 하지만 보안상 권장되지 않으며, 기본값은 `False`이다.

```
CORS_ALLOW_ALL_ORIGINS = True
```

다음과 같이 가능한 origin을 추가해 주면, 지정된 origin은 CORS가 허용된다.

```
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]
```

앞에서 서술하였듯 origin은 프로토콜 + 호스트 + 포트번호를 뜻하므로, 이 세 가지 정보를 함께 적어 주어야 한다.
