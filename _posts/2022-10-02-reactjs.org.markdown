---
layout: post
title:  "reactjs.org 튜토리얼 + w3school Javascript"
date:   2022-10-02 12:18:07 +0900
categories: reactjs
---

|                   | 뽀모도리    | 등 운동 | 가슴 운동 |
|-------------------|---------|------|-------|
| 1일<br>(달성/목표)     | 13/16+5 | 5/5  | 5/5   |
| 1주<br>(달성/목표)     | 42/40   |      |       |



## 움직임 내역 보여주기

React 컴포넌트는 자바스크립트의 first-class 오브젝트이다.

자바스크립트 배열에는 map 메서드가 있다. 다음과 같이 씀. 히스토리를 map 메서드를 이용해서 매칭시켜준다.

```js
const numbers = [1, 2, 3];
const doubled = numbers.map(x => x * 2);
```

* 다이내믹한 리스트를 만들 경우 key를 꼭 사용하자.


## 틱택토 완성 코드

```js
function Square(prop) {
  return(
    <button className="square" onClick={prop.onClick}>
      {prop.value}
    </button>
  );
}

class Board extends React.Component {
  renderSquare(i) {
    return (<Square 
             value={this.props.squares[i]}
             onClick={() => this.props.onClick(i)}
           />
    );
  }

  render() {
    return (
      <div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      history: [{
        squares: Array(9).fill(null),   
      }],
      stepNumber: 0,
      xIsNext: true,
    };
  }
  handleClick(i){
    const history = this.state.history.slice(0, this.state.stepNumber + 1);
    const current = history[history.length - 1];
    const squares = current.squares.slice();
    if (calculateWinner(squares) || squares[i]) {
      return ;
    }
    squares[i] = this.state.xIsNext? 'X' : 'O';
    this.setState({
      history: history.concat([{
        squares: squares,  
      }]),
      stepNumber: history.length,
      xIsNext: !this.state.xIsNext,
    });
  }
  jumpTo(step){
    this.setState({
      stepNumber: step,
      xIsNext: (step % 2) === 0,
    });  
  }

  render() {
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    const winner = calculateWinner(current.squares);
    
    const moves = history.map((step, move) => {
      const desc = move ?
            "Go to #" + move :
            "Go to Game Start";
      return (
        <li key={move}>
          <button onClick={() => this.jumpTo(move)}>{desc}</button>
        </li>
      )
    });
    
    let status;
    if (winner) {
      status = 'Winner' + winner;
    } else {
      status = 'Next player: ' + (this.state.xIsNext? 'X' : 'O');
    }
    return (
      <div className="game">
        <div className="game-board">
          <Board 
            squares={current.squares}
            onClick={(i) => this.handleClick(i)}
          />
        </div>
        <div className="game-info">
          <div>{status}</div>
          <ol>{moves}</ol>
        </div>
      </div>
    );
  }
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

// ========================================
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Game />);
```


## 

### What should I know first?
have a goodhandle on javascript.

1. Data types, variables, loop, functions, loops
2. Promises & asynchronous programming
3. Array methods like `forEach()` & `map()`
4. Fetch API & making HTTP requests

1만 goodhandle인듯...

w3school.com으로 다시 go.


* 한 줄에 80자 이상 넘어가지 않도록 하는 게 좋다. 넘어가는 경우 연산자(= 등) 뒤에서 끊어주는 게 좋음.

### 주석
* HTML: `<!-- -->`
* CSS: `/* ... */`
* Javascript: `//`, `/* .. */`


### const

보통 Array, Object, Function, RegExp 등을 선언할 때 사용한다.

배열의 원소 값을 수정하는 건 되는데, 배열을 재할당하는 건 안 되는 것.

```js
const cars = ["Saab", "Volvo", "BMW"];

cars[0] = "Toyota";                  // O
cars = ["Toyota", "Volvo", "Audi"];  // X
```


### objects

* object: 자동차 한 대
* properties: 차의 무게, 색깔 등등..
* methods: 출발, 브레이크, 드라이브 등...

object도 변수와 마찬가지로 값을 담을 수 있다. 그런데 많은 값을 담을 수 있다.

```js
const car = {type:"Fiat", model:"500", color:"white"};
```

object 선언이니까 const로. value는 다음과 같이 접근할 수 있다.

```js
car.type;
car["type"];
```

#### this

```js
const person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
```

`this` 키워드는 오브젝트를 가리킨다. 어떤 오브젝트를 가르키느냐는 `this`의 위치에 따라 달라진다.

어떤 object 안에 있다면(위에서의 person 안에서처럼) `this`는 해당 오브젝트를 가리킨다.

어떤 event 안에 있다면, 그 이벤트를 받은 엘리먼트를 가리킨다.


> String, Numbers, Boolean은 object로 선언하지 마시오!
> 효율이 나빠짐. `x = new String()` X!


## Event

다음 코드를 실행하면, 자바스크립트는 ID가 'demo'인 엘리먼트의 내용을 바꾼다.
```html
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>
```

다음의 코드는 자기자신 엘리먼트의 내용을 바꾼다. 따라서 'The time is?'가 지워지고, 시간 결과가 출력됨.
```html
<button onclick="this.innerHTML=Date()">The time is?</button>
```

## String

`===`는 값과 타입이 전부 같아야 한다.

```js
let x = "John";        // x is a string
let y = new String("John");  // y is an object
let z = new String("John");  // z is an object

(x===y) // False: string과 object 비교라서
(y===z) // False: object끼리는 비교하지 않는다고 합니다.
```

오브젝트끼리의 `===` 비교는 언제나 false.


`slice(7)`처럼 파마미터를 하나만 넣는다면, 7부터 끝까지의 글자를 반환한다.



replace는 원본 string을 직접 바꾸지 않고, 맨 처음에 매치되는 단어 하나만 바꾼다. 전부 다 바꾸고 싶다면 정규식으로 표현해야 한다. 정규식은 `/.../g`

```js
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "W3Schools");
```


`trim`: 글자 양쪽에 있는 빈칸들을 알아서 정리해 준다. 앞부분 정리해 주는 `trimStart`와 뒷부분 정리해 주는 `trimEnd`도 있다. 


### String Search
```js
let str = "Please locate where 'locate' occurs!";
str.indexOf("locate");
```

locate가 처음 나오는 곳의 index를 반환한다.


### template literal

ES6에서 새롭게 도입한 문자열 표기법

여러 줄을 그냥 써도 되고,
```js
let text =
`The quick
brown fox
jumps over
the lazy dog`;
```
다음과 같이 `+` 연산자 없이 string 안에 변수를 넣어서 표기할 수 있다.
```js
let firstName = "John";
let lastName = "Doe";

let text = `welcome, #{firstName} #{lastName}`
```


string에서 글자 하나 추출해주는 charAt 
```js
let text = "HELLO WORLD";
let char = text.charAt(0);
```


### Numbers

실수값에서의 연산은 정확도를 담보할 수 없기 때문에 다음과 같이 정수로 만들어 준 후 연산한 다음에 실수로 만들어 주는 게 낫다.

```js
let x = (0.2 * 10 + 0.1 * 10) / 10;
```

* NaN: Not A Number 에러. `typeof NaN`은 `number`를 반환한다.


### 배열

배열은 object의 특별한 종류이다. 배열 안에는 오브젝트, 함수, 또 다른 배열 등이 다 들어갈 수 있다.

```js
myArray[0] = Date.now;  // object
myArray[1] = myFunction;  // function
myArray[2] = myCars;   // array
```

* 배열은 숫자로 인덱싱하고, 오브젝트는 이름으로 인덱싱한다! (배열을 이름으로 인덱싱하려하면 안 됨.)

#### forEach

배열 원소마다 주어진 함수를 호출한다. 함수는 배열 원소값을 받아와서 처리한다.

```js
const fruits = ["Banana", "Orange", "Apple", "Mango"];

let text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";

function myFunction(value){
  text += "<li>" + value + "</li>";
}

```


### 배열 메서드

다음과 같이 `toString` 메서드를 이용하면, 배열을 문자열로 만들 수 있다. 그렇지만 연결 부분을 원하는 문자로 넣고 싶다면 `join`을 사용하자.


```js
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");
```

결과가 다음과 같이 나옴.
```
Banana * Orange * Apple * Mango
```

배열 원소를 중간에 끼워 넣을 때, `splice` 메서드. 
```js
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
```
결과: Banana,Orange,Lemon,Kiwi,Apple,Mango

두 번째 파마리터 `0`은 삭제될 원소의 개수를 의미한다. 삭제하지 않고 끼워 넣을 것이므로 0



#### sort

숫자가 들어 있는 배열을 sort해도, alphabet 순서(예: 1,10,100,25,40,5) 로 정렬된다. 따라서 숫자의 대소를 기준으로 정렬하려면 약간의 트릭을 써야 한다.

```js
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b}); // 오름차순
points.sort(function(a, b){return b - a}); // 내림차순
```

랜덤으로 재정렬하려면 다음과 같이

```js
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(){return 0.5 - Math.random()});
```


### iterables

문자열

```js
const name = "school";

for (const x of name){
    // x: 낱단어 하나하나씩
}
```

배열 하나씩 접근

```js
const letters = ["a", "b", "c"];

for (const x of letters){
    // x: 배열 원소 하나하나씩
{
```

### map
key-value 쌍으로 관리한다.

다음과 같이 배열을 전달해서 만들 수도 있고, set 메서드로 추가해도 된다.
```js
const fruits = new Map([["banana", 500], ["apple", 100]]);
```

set 메서드는 수정할 때도 쓸 수 있다. get은 key 값으로 value 구할 때
```js
const fruits = new Map();

fruits.set("apple", 100); // apple 추가
fruits.set("apple", 200); // apple 수정
fruits.get("apple");  -> 200 출력됨
```

`forEach()` 메서드 이용하기. value, key 순서로 파라미터가 나옴에 유의하자.
```js
fruits.forEach(function(value, key){
    ... value ... key ;
})
```

`entries` 메서드 이용하기. `[key, values]` object가 리턴된다.
```js
for (const x of fruits.entries()){
  text += x.join('/');
}
```


### try-catch

5~10 사이의 값 받기.

```js
<input id="demo" type="text">
<button type="button" onclick="myFunction()">Test Input</button>
<p id="p01"></p>

<script>
function myFunction(){
  const message = document.getElementById("p01");
  message.innerHTML = "";
  
  let x = document.getElementById("demo").value;
  try {
    if(x == "") throw "empty";
    if(isNaN) throw "not a number";
    x = Number(x);
    if(x < 5) throw "too low";
    if(x > 10) throw "too high";
  }
  catch(err) {
    message.innerHTML = "Input Is" + err;
  }
}
</script>
```

finally: 어떻게 되든 무조건 실행되는 것



### arrow function

```js
hello = function () { return "HELLO"; }

hello = () => { return "HELLO"; }

hello = () => "HELLO"; // 값을 리턴하는 한 줄뿐이라면 이렇게도 줄일 수 있다.
```


this.

```js
<button id="btn">Click Me!</button>
<p id="demo"></p>

<script>
let hello="";

hello = function() {
  document.getElementById("demo").innerHTML += this;
}

window.addEventListener("load", hello);  // 1. 

document.getElementById("btn").addEventListener("click", hello);  // 2. 

</script>

```

1. window object(최상위 오브젝트)에서 페이지가 로드될 때 hello 함수를 호출했다. 따라서 this값은 `[object Window]`로 출력된다.
2. button 엘리먼트가 hello 함수를 출력했다. 따라서 this값은 `[object HTMLButtonElement]`로 출력된다.



### class

자바스크립트 class는 object가 아니다. 자바스크립트 오브젝트를 위한 template이다.

```js
class Car {
  constructor(name, year){
    this.name = name;
    this.year = year;
  }
}
```

class를 만들면, 항상 constructor()라는 메서드를 붙여야 한다. 오브젝트가 만들어지면, constructor 메서드는 늘 자동으로 호출된다. initial property(여기서는 name, year)를 초기화하는 데 사용된다.






### attribute vs. property

attribute는 HTML 문서에서 elements 안에 추가적인 정보를 담을 때 사용한다.

```html
<div class="myclass">
```

* `div`: elements
* `class`: attribute
* `myclass`: attribute의 value







