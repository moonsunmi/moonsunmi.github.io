---
layout: post
title: "csv import/export in Django 코드 살펴보기"
date: 2023-07-24 12:18:07 +0900
tags: Django post
---

admin 화면을 구성하려면 csv 등의 파일을 improt하거나 export하는 게 필요할 때가 있다. admin에서 export만 구현하려면 다음과 같이 하면 된다.
서비스 내에서 자체적인 콘텐츠를 제공하는 형태가 아니라면 export로도 충분할 수 있다.

### ModelAdmin에 액션 추가하기

django admin에서 csv export 기능을 만드는 것은, action을 추가하는 것이다.

```python
@register(User)
class UserAdmin(ExportCsvMixin, ModelAdmin):
    list_display = ('email', 'name', 'phone', 'birthday', 'gender')
    search_fields = ('email', 'name', 'phone', 'birthday')

    actions = ['export_as_csv']
```

액션은 이렇게 actions에 원하는 액션 함수만 추가해 주면 된다.

### 액션 함수 만들기

우선 액션 함수는 다음과 같이 만들어진다. 정형화된 코드라 검색을 하면 이거랑 다 비슷하게 나온다.

```python
def export_as_csv(self, request, queryset):
    meta = self.model._meta
    field_names = [field.name for field in meta.fields]

    response = HttpResponse(content_type='text/csv', charset='euc-kr')
    response['Content-Disposition'] = 'attachment; filename={}.csv'.format(meta)
    writer = csv.writer(response)

    writer.writerow(field_names)
    for obj in queryset:
    writer.writerow([getattr(obj, field) for field in field_names])

    return response

export_as_csv.short_description = "Export Selected"
```

Admin Action은 다음과 같이 세 개의 파라미터를 가진다.

1. 현재의 ModelAdmin
2. HttpRequest
3. 사용자가 선택한 object들의 쿼리셋(즉, export하겠다고 선택한 데이터를 말한다.)

### meta 데이터

우선 csv에서 맨 윗줄이 될 field들의 이름을 가져온다. model의 `_meta` 값에 field 정보들이 있다.

`Action` 클래스를 보면, `opts` 값이 다음과 같이 지정되어 있다(https://docs.djangoproject.com/en/4.2/ref/models/meta/).
`opts = self.model._meta`

따라서 다음을 이렇게 해 줘도 좋다.

변경 전: `meta = self.model._meta`
변경 후: `option = self.opts`

### content-disposition

Response Header에는 content-disposition라는 항목이 있다. 요청한 데이터를 어떤 식으로 받을 건지 나타낸다. 브라우저 안에서 보여질 것인지(inline), 브라우저의 일부분으로 보여질 것인지(multi-part), 첨부 파일로 제공될 것인지(attachment) 선택할 수 있다. 당연히 디폴트값은 `inline`.

첨부 파일로 제공하려면 이 값을 attachment로 바꿔야 하므로, content-disposision 항목을 건드려야 한다.

```python
response['Content-Disposition'] = 'attachment; filename={}.csv'.format(meta)
```

### getattr

데이터들의 값은 다음과 같이 한 줄씩 적어준다. 한 칸 씩 한 줄을 만들고, 한 줄씩 적어나는 것이므로 사실상 이중 for 문 형태다.

```python
for obj in queryset:
    row = writer.writerow([getattr(obj, field) for field in field_names])
```

여기에서 getattr를 쓰는데, 문자열 형태의 filed 이름으로 모델 인스턴스에 접근하기 위해서다. obj.name으로 접근할 수는 있는데, obj[‘name’]으로는 접근할 수 없다.

### 템플릿 파일 만들기

import 시에는 템플릿 파일이 추가적으로 필요하다. csv 파일을 업로드할 때, 파일을 선택하는 페이지가 있다. admin 화면에서도 이렇게 csv 파일을 업로드할 페이지(csv_form.html)를 따로 만들어야 한다.

```python
{% raw %}
{% extends 'admin/base.html' %}

{% block content %}
    <div>
        <form action="." method="POST" enctype="multipart/form-data">
            {{ form.as_p }}
            {% csrf_token %}

                <button type="submit">Upload CSV</button>
        </form>
    </div>
    <br />

{% endblock %}
{% endraw %}
```

Rest API를 만들 때만 Django를 사용하고 있었다면, 상당히 어색해 보일 수 있다.

### django-import-export 라이브러리

다른 방법으로 django-import-export 라이브러리를 사용할 수도 있다. csv뿐 아니라 다양한 형태의 파일의 import, export를 제공한다. 그래서 이 라이브러리를 쓰는 것도 괜찮은 방법이 될 수 있다.

https://django-import-export.readthedocs.io/en/latest/
