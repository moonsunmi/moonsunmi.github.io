---
layout: post
title: "React deep dive) 메모이제이션"
date: 2024-03-11 12:18:07 +0900
tags: deepdive
---

###### \<모던 리액트 Deep Dive\>의 내용을 제가 이해한 바로 다시 정리한 글입니다.

`useMemo`, `useCallback` API와 고차 컴포넌트인 `memo`는 렌더링을 최소화하기 위해 제공된다.

그러나 메모이제이션에도 비용이 든다.

과거의 값과 비교하여 렌더링이나 재계산이 필요한지 결정하고, 이전의 결과물을 저장해 두었다가 다시 꺼내야 한다.

- 메모이제이션 소극적 활용 입장: 개발자가 예측해서 메모이제이션하는 것보다는 개발자 도구나 `useEffect`를 사용해 실제로 어떻게 렌더링이 일어나는지 확인 후에 필요한 곳에서만 최적화하는 게 좋다.

- 메모이제이션 적극적 활용 입장: 어차피 리액트는 이전 렌더링 결과를 다음 렌더링과 구별하기 위해 저장해 둔다. 결국 얕은 비교만이 지불해야 할 비용이다.

#### pure component

Pure Component는 React 애플리케이션의 성능 최적화를 위해 사용되는 컴포넌트 유형으로, props와 state의 얕은 비교를 통해 불필요한 렌더링을 줄인다.

얕은 비교란 객체의 최상위 수준의 값만을 비교하여 동일한지 확인하는 것을 말한다. 따라서 객체의 깊은 수준에서 변경되는 경우, Pure Component는 이를 감지하지 못할 수도 있다. 함수 컴포넌트에서는 React.memo를 사용하여 비슷한 최적화를 적용할 수 있다.

### 메모이제이션을 사용하지 않았을 때 생기는 문제 예

다음과 같이 `App` 컴포넌트에서 `useMath` 훅을 사용한다고 가정하자. `App` 컴포넌트에서는 `value`의 값이 바뀌었을 때만, 결괏값을 찍어 주도록 해 놨다.

그런데 `counter`만 바뀌어도 console.log가 작동해 `value`값을 계속 찍어준다.

```js
function useMath(number: number) {
  const [double, setDouble] = useState(0);
  const [triple, setTriple] = useState(0);

  useEffect(() => {
    setDouble(number * 2);
    setTriple(number * 3);
  }, [number]);

  return { double, triple };
}

export default function App() {
  const [counter, setCounter] = useState(0);
  const value = useMath(10);

  useEffect(() => {
    console.log(value.double, value.triple);
  }, [value]);

  const handleClick = () => {
    setCounter((prev) => prev + 1);
  };

  return (
    <>
      <h1>{counter}</h1>
      <button onClick={handleClick}>+</button>
    </>
  );
}
```

그 이유는 이렇다. `counter` 상태값이 변하면, `App` 컴포넌트는 리렌더링된다. 그래서 `useMath`도 호출된다.

`useMath`의 `number`가 바뀌지는 않았기 때문에 `useMath` 안에 있는 `useEffect`가 호출되지는 않는다.

그래서 `double`과 `triple`값이 업데이트되지는 않는다. 하지만 반환할 값은 객체이다. 값은 같으나 참조는 다른 새로운 객체가 반환되는 것이다.

그래서 `App` 컴포넌트 입장에서는 `value`가 이전과 다른 객체로 인식되어 `useEffect`를 발동시키는 것이다.

객체에 대한 비교는 값이 같더라도 참조가 다르면 다른 값으로 치부된다.

따라서 `number`가 변하지 않았을 경우 이전과 같은 객체를 반환하도록 해야 한다. 이렇게 `double`과 `triple`을 의존성 배열에 넣고 `useMemo`를 사용하면, 값이 바뀌지 않는 이상 이전에 있던 객체의 참조를 전달한다.

```js
return useMemo(
  () => ({
    double,
    triple,
  }),
  [double, triple]
);
```
