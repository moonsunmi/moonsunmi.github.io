---
layout: post
title: "TIL) POMO-WEEKLY 프로젝트(타미어 만들기)"
date: 2022-11-05 12:18:07 +0900
categories: react
---

React는 MVC 등 중에서 뷰만 신경 쓰는 라이브러리이다. 렌더링은 사용자 화면에 뷰를 보여주는 것이다. DOM은 오브젝트로 문서 구조를 표현하는 방법이다.

DOM을 업데이트하는 것이 느리기 때문에 React는 Virtural DOM을 사용한다. 수정이 필요한 컴포넌트만 수정한다.

### Start/Stop 버튼 만들기

Start와 Stop 기능을 만드는 것까지는 굉장히 쉬울 줄 알았다. Stop은 쉬웠지만, Start는 은근히 까다로웠다.

`useEffect`를 이용해서 1초마다 반복하게 만들었기 때문에, 이 타이머는 맨 처음에 렌더링되자마자 카운트다운이 시작되었다. 다른 방법이 있는지, `useEffect`를 맨 처음 렌더링만 막을 수는 없는지 살펴보기 위해 검색을 했는데... 페이지 로딩되지마자 시작하는 카운트다운만 잔뜩 있었다. ㅋㅋ

어쨌든 내 프로그램에서는 start 상태인지, stop 상태인지를 알아야 버튼도 바꾸고, 다른 작업도 할 수 있기 때문에 `isCounting`이라는 카운팅하는 도중인지를 알려주는 상태를 만들고, useEffect의 디펜던시로 추가했다.

TimerContainer.js

```js
import { useEffect, useState } from "react";
import State from "./State";

const TimerContainer = ({ minutes, seconds }) => {
  // 분과 초를 따로 관리하는 게 나을 수도 있겠다.
  let initPomodori = minutes * 60 + seconds;
  const [countdownNumber, setCountdownNumber] = useState(initPomodori);
  const [isCounting, setIsCounting] = useState(false);
  let startStopButton;

  useEffect(() => {
    if (isCounting) {
      const interval = setInterval(() => {
        if (countdownNumber <= 0) {
          setCountdownNumber(initPomodori);
          setIsCounting(false);
          clearInterval(interval);
        } else {
          setCountdownNumber(countdownNumber - 1);
        }
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [countdownNumber, isCounting]);

  if (isCounting) {
    startStopButton = (
      <div className="button w-3/4" onClick={() => setIsCounting(false)}>
        Stop
      </div>
    );
  } else {
    startStopButton = (
      <div className="button w-3/4" onClick={() => setIsCounting(true)}>
        Start
      </div>
    );
  }

  return (
    <div className=" shadow-lg bg-yellow-100 text-yellow-600  text-lg items-center w-64 rounded-lg border border-yellow-600 p-3	">
      <div className=" border-yellow-600">리액트 프로그래밍 공부</div>

      <div className="text-4xl my-8 font-mono">
        {Math.floor(countdownNumber / 60)} : {countdownNumber % 60}
      </div>
      <div className="flex justify-center m-3">{startStopButton}</div>
      <div className="border-t border-yellow-600 text-sm">
        <p className=" text-lg my-2">States</p>
        <State stateName={"오늘의 뽀모도리"} stateNumber="8" />
        <State stateName={"이번주 뽀모도리"} stateNumber="20" />
        <State stateName={"리액트 공부"} stateNumber="20" />
      </div>
    </div>
  );
};

export default TimerContainer;
```

TimerContainer 컴포넌트가 너무 큰 것 같다. Counting되는 숫자가 보여주는 부분을 컴포넌트로 분리하는 게 좋을 것 같다.

### 할 일

1. Timer 컴포넌트의 시계 표시 부분 Counter 컴포넌트로 분리하기
2. 커스텀 훅으로 만들 수 있다면 만들자(1번)
3. redux 이용해서 시, 분 저장하기 - redux 공부하기
4. tailwindcss 잘 쓰기..? https://theodorusclarence.com/blog/tailwindcss-best-practice

<hr />
토) 운동

| 하체폼롤러 | 삼두 | 뒷벅지 |
| ---------- | ---- | ------ |
| X          | 3/3  | 3/3    |
