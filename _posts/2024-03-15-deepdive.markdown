---
layout: post
title: "React deep dive) 리액트 훅(useMemo, useCallback, useRef)"
date: 2024-03-15 12:28:07 +0900
tags: deepdive
---

### useMemo vs. React.memo

`useMemo`는 값을 메모이제이션하는 것이고, `React.memo`는 컴포넌트를 메모이제이션하는 것이다.

### useMemo vs. useEffect

`useMemo`와 `useEffect` 모두 의존성 배열이 있다. 그리고 의존성 배열에 추가된 변수가 수정될 때 이 함수가 실행된다.

결국에는 `useEffect` 안에서 값을 연산하더라도, 필요할 때만 연산을 할 수가 있는 것이다.

하지만 `useEffect`의 경우 이 외부효과를 발생시키는 변수의 변화를 반영하기 위해 한 번 렌더링한 후에야 비로서 안에 있는 연산을 한다.

그렇기 때문에 연산한 후의 값을 위한 렌더링을 또 한 번 더 발생시켜줘야 한다. 컴포넌트 안의 state가 연산의 결괏값이라면, setState를 발생시켜 새 값을 위한 렌더링을 일으키는 것이다.

결국 두 번의 렌더링이 일어난다.

반면에 `useMemo` 같은 경우는 의존성 배열에 추가된 변수가 수정될 때, 내부의 연산이 실행되고 그 결괏값을 바로 렌더링에 반영한다. 그러므로 불필요한 렌더링 한 번이 줄어든다.

### useMemo vs. useCallback

`useMemo`가 값을 기억했다면, `useCallback`은 인수로 넘겨받은 함수 자체를 기억한다. 특정 함수를 새로 만들지 않고 재사용한다는 의미이다.

함수를 재사용한다는 게 무슨 뜻일까?

```js
const ChildComponent = memo(({ name, value, onChange }) => {
  useEffect(() => {
    console.log("rendering!", name);
  });
  return (
    <>
      <h1>
        {name}
        {value ? "on" : "off"}
      </h1>
      <button onClick={onChange}>toggle</button>
    </>
  );
});

export default function App() {
  const [status1, setStatus1] = useState(false);
  const [status2, setStatus2] = useState(false);

  const toggle1 = useCallback(
    function toggle1() {
      setStatus1(!status1);
    },
    [status1]
  );

  const toggle2 = () => {
    setStatus2(!status2);
  };

  return (
    <>
      <ChildComponent name="1" value={status1} onChange={toggle1} />
      <ChildComponent name="2" value={status2} onChange={toggle2} />
    </>
  );
}
```

`state`값이 바뀌며 `App`이 리렌더링되면, `toggle2`의 경우 새로운 함수가 만들어지면서 전달된다. 그래서 `memo`를 이용해서 `onChange`가 바뀔 때만 `ChildComponent`를 리렌더링시키고 싶은 목적을 달성할 수 없게 된다.

그래서 `toggle1`처럼 `useCallback` 함수를 이용해서 의존성배열에 있는 변수가 바뀌었을 때만, 함수를 새로 생성하도록 해야 한다.

따라서 `memo`로 받는 자식 컴포넌트가 있다면, 부모에서 함수를 넘겨줄 때 `useCallback` 함수와 쌍으로 이루는 게 좋다.

### useRef

`useRef`는 크게 두 가지 경우에 유용하다.

1. DOM에 바로 접근하고 싶을 때
2. 이전 값을 렌더링에 영향을 주지 않고 저장하고 싶을 때

`useRef`는 `useState`처럼 렌더링이 일어나도 변경 가능한 상태값을 저장한다. 그러나 `useRef`는 그 값이 변하더라도 렌더링을 발생시키지 않는다.

개발자가 원하는 시점의 값을 렌더링에 영향을 미치지 않고 보관해 두고 싶다면 `useRef`를 사용하는 것이 좋다.

```js
function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

export default function SomeComponent() {
  const [counter, setCounter] = useState(0);
  const previousCounter = usePrevious(counter);

  function handleClick() {
    setCounter((prev) => prev + 1);
  }
  return (
    <button onClick={handleClick}>
      {counter},{previousCounter}
    </button>
  );
}
```

#### useRef로 이전값을 저장하는 방식이 유용한 상황

1. 상태 변화 감지: 사용자 입력이 이전과 다른지 검사하거나, 상태 변화에 따라 애니메이션을 주고 싶을 때
2. 이전 상태에 기반한 조건부 실행: 특정 값에 도달하면 알림 표시를 하는 등, 카운터 값을 증가하기는 하지만 이전 값에서 추가적인 작업을 하고 싶은 경우
3. 비용이 큰 연산 최적화: 이전 상태와 비교하여 꼭 필요할 때만 연산을 수행하도록 할 수 있다.
4. 렌더링 사이의 상태 유지: state나 props가 변경되어 컴포넌트가 리렌더링되더라도 유지하고 싶은 정보가 있을 때
