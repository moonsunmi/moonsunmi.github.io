---
layout: post
title: "React deep dive) 클로저"
date: 2024-03-07 12:18:07 +0900
tags: deepdive
---

###### \<모던 리액트 Deep Dive\>의 내용을 제가 이해한 바로 다시 정리한 글입니다.

### 스코프

**스코프**는 변수의 유효 범위이다. 자바스크립트는 다른 언어와 달리 기본적으로 함수 레벨 스코프를 따른다. 스코프는 `this`와 달리 함수를 실행할 때가 아니라, 함수가 정의될 떄 정해진다.

전역 스코프에서 선언하면 어디에서든 그 변수를 사용할 수 있다. 브라우저 환경에서의 `window` 전역 객체가 그 예.

## 클로저

클로저는 함수와, 함수가 정의된 환경의 조합이다. `innerFunction` 함수를 기준으로 보면, 자신의 바깥 환경인 `outerFunction`에 선언되어 있는 변수에 대한 정보도 가지고 있다. 즉, 자기자신인 `innerFunction`과, 자신이 정의되어 있는 `outerFunction`에 대한 정보를 기억하고 있는 함수를 클로저라고 한다.

```
function outerFunction() {
  let outerVariable = '나는 밖에 있어!';

  function innerFunction() {
    console.log(outerVariable); // '나는 밖에 있어!'
  }

  return innerFunction;
}

let myInnerFunction = outerFunction(); // innerFunction을 반환
myInnerFunction(); // 이제 myInnerFunction은 innerFunction을 참조
```

함수(`outerFunction`)가 함수를 반환하고 있는 상태에서 반환되는 함수(`innerFunction`)가, 자신을 감싼 함수의 지역 변수(`outerVariable`)에 접근하면 클로저 함수가 된다.

이렇게 할 경우 외부에서 `outerFunction`의 지역변수에 직접 접근할 수 없기 때문에, 프라이빗한 변수가 되고 상태를 안전하게 관리할 수 있다.

함수가 정의된 환경을 기억해야 하므로 추가 비용이 발생한다는 단점이 있다. 기억하고 있는 환경에 사이즈가 큰 배열이 있다면, 그게 호출되기 전부터도 메모리를 잔뜩 잡아 먹게 되는 것이다.

### 클로저와 스코프

```
function foo() {
    var x = 100;
    var y = 5555;
    console.log(x);

    function bar(){
        var x = 1000000;
        console.log(x);  // bar 함수의 지역 스코프에서 x를 찾아 출력.
        console.log(y);  // bar가 클로저 함수라 y가 출력됨.
    }

    bar()
}

foo() // 출력: 1000000 5555
```

### 클로저 사용 시 유의 사항

`setTimeout`은 두 번째 인자의 초(minute)만큼 첫 번째 인자의 콜백 함수 실행을 미룬다. `var`는 함수 레벨 스코프 변수이다.

```
for (var i = 0; i < 5; i++){
    setTimeout(function () {
        console.log(i);
    }, i * 1000)
}
```

이렇게 작성할 경우, `i`의 스코프는 `for` 문과 `setTimeout`에서 같기 때문에(같은 함수 레벨에 있으므로) `4`값이 다섯 개의 `setTimeout` 인자로 전달된다.

`setTimeout`은 비동기 함수이므로 `i`가 `0`일 때, `setTimeout(function () { ... }, i)`이 태스크 큐에 들어간다. `for` 문이 아직 실행 중이라 콜 스택이 비어 있지 않기 때문이다.

`i`가 증가할 때마다 `setTimeout` 함수가 태스크 큐에 들어간다.

`for`문이 다 끝나고, 콜 스택이 비게 되면 태스크 큐에 들어 있던 `setTimeout`들이 순차적으로 실행된다.

#### let으로 함수 레벨 스코프를 블록 레벨 스코프로 제한하기

`let`으로 블록 스코프를 형성하면, for 문의 i 숫자마다 스코프가 생성된다. `0`일 때, 콜 스택에는 아무것도 들어가지 않고, 태스크 큐에 `setTimeOut`이 들어간다. 콜 스택이 비어 있으므로, 태스크 큐에 있던 `setTimeOut`이 실행된다.
