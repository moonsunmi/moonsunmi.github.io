---
layout: post
title: "TIL) 리액트를 다루는 기술"
date: 2022-11-07 12:18:07 +0900
categories: react
---

### useMemo

useMemo: 이전에 사용한 값을 재사용한다는 의미를 가진다.

다음과 같이 user가 바뀔 때만 다시 계산할 필요가 있는 getActiveUserNumber 함수는 useMemo를 이용하고, deps을 users로 지정해 준다. 그러면 user가 바뀔 때만 getActiveUserNumber를 실행해 계산한다. users가 바뀌지 않았다면 저장해둔 그 전값을 바로 사용한다.

```js
function getActiveUserNumber(users) {
  console.log("activeUserNumber Function called");
  return users.filter((user) => user.active).length;
}

function App() {
  const [inputs, setInputs] = useState({ username: "", nickname: "" });
  const { username, nickname } = inputs;
  const nextId = useRef(4);
  const [users, setUsers] = useState([
    { id: 1, username: "도민준", nickname: "민준맘", active: true },
    { id: 2, username: "공유", nickname: "도깨비", active: false },
    { id: 3, username: "곽상준", nickname: "각도기", active: false },
  ]);

  ...

  const activeUserNumber = useMemo(() => {
    return getActiveUserNumber(users);
  }, [users]);

  ...

  <p>활성 사용자 수: {activeUserNumber}</p>
```

### useCallback & React.memo

useMemo의 함수 버전이 useCallback이다.

useCallback을 사용하고, React.memo로 컴포넌트 렌더링 최적화 작업을 해 주어야 선응이 최적화된다.

얘는 아직 어떻게 되는지 잘 모르겠다.

UserList.js

```js
import React, { useEffect } from "react";

const User = React.memo(({ user, onRemove, onToggleActive }) => {
  useEffect(() => {
    console.log("user 값이 설정됨");
    return () => {
      console.log("user가 바뀌기 전..");
    };
  }, [user]);
  return (
    <div>
      <b
        style={% raw %}{{
          cursor: "pointer",
          color: user.active ? "green" : "black",
        }}{% endraw %}
        onClick={() => onToggleActive(user.id)}
      >
        {user.username}
      </b>{" "}
      (<span>{user.nickname}</span>)
      <button onClick={() => onRemove(user.id)}>삭제</button>
    </div>
  );
});

const UserList = ({ users, onRemove, onToggleActive }) => {
  return (
    <div>
      {users.map((user) => (
        <User
          user={user}
          key={user.id}
          onRemove={onRemove}
          onToggleActive={onToggleActive}
        />
      ))}
    </div>
  );
};

export default React.memo(UserList);

```

CreateUser.js

```js
import React from "react";

const CreateUser = ({ username, nickname, onChange, onCreate }) => {
  return (
    <div>
      <input
        name="username"
        placeholder="계정명"
        onChange={onChange}
        value={username}
      ></input>
      <input
        name="nickname"
        placeholder="닉네임"
        onChange={onChange}
        value={nickname}
      ></input>
      <button type="submit" onClick={onCreate}>
        등록
      </button>
    </div>
  );
};

export default React.memo(CreateUser);
```

App.js

```js
import Info from "./Info";
import React, { useCallback } from "react";
import "./App.css";
import Counter from "./Counter";
import CreateUser from "./CreateUser";
import InputSample from "./InputSample";
import UserList from "./UserList";
import { useMemo, useRef, useState } from "react";

function getActiveUserNumber(users) {
  console.log("activeUserNumber Function called");
  return users.filter((user) => user.active).length;
}

function App() {
  const [inputs, setInputs] = useState({ username: "", nickname: "" });
  const { username, nickname } = inputs;
  const nextId = useRef(4);
  const [users, setUsers] = useState([
    { id: 1, username: "도민준", nickname: "민준맘", active: true },
    { id: 2, username: "공유", nickname: "도깨비", active: false },
    { id: 3, username: "곽상준", nickname: "각도기", active: false },
  ]);

  const onChange = useCallback(
    (e) => {
      const { name, value } = e.target;

      setInputs({ ...inputs, [name]: value });
    },
    [inputs]
  );

  const onCreate = useCallback(() => {
    const user = {
      id: nextId.current,
      username,
      nickname,
    };
    setUsers([...users, user]);
    nextId.current += 1;
    console.log(users);
  }, [users, username, nickname]);

  const onRemove = useCallback(
    (id) => {
      setUsers(users.filter((user) => user.id != id));
    },
    [users]
  );

  const onToggleActive = useCallback(
    (id) => {
      setUsers(
        users.map((user) =>
          user.id === id ? { ...user, active: !user.active } : user
        )
      );
    },
    [users]
  );

  const activeUserNumber = useMemo(() => {
    return getActiveUserNumber(users);
  }, [users]);

  return (
    <div className="App">
      <CreateUser
        username={username}
        nickname={nickname}
        onChange={onChange}
        onCreate={onCreate}
      />
      {/* props 전달 <InputSample />*/}

      <hr />
      <UserList
        users={users}
        onRemove={onRemove}
        onToggleActive={onToggleActive}
      />
      <p>활성 사용자 수: {activeUserNumber}</p>
    </div>
  );
}

export default App;
```

<hr />
월) 운동

| 종아리 | 앞벅지 | 삼두 | 뒷벅지 |
| ------ | ------ | ---- | ------ |
| 3/3    | 3/3    | 3/3  | 3/3    |
