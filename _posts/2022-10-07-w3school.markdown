---
layout: post
title: "React JS Crash Course"
date: 2022-10-07 12:18:07 +0900
categories: react
---

### 생성된 파일들

다음의 jsx는

```html
<div className="App">
  <h1>Hello From React</h1>
</div>
```

실행 후 브라우저에서 html을 확인하면 평범한 HTML 문법을 이용해서 바뀐 걸 확인할 수 있다. (className => class)

```html
<div class="App">
  <h1>Hello From React</h1>
</div>
```

`<h1>`을 `<div>`로 감싸고 싶지 않다면 `<div></div>` 대신에 `<></>`로 바꾼다.

### components 폴더

아주 많은 컴포넌트들을 만들 게 될 것이다. src 폴더 아래 components 폴더를 만들고, 그 폴더에 저장한다. Header.js 파일 만듦. 컴포넌트 파일에 대문자로 시작하는 게 컨벤션.

> 'ES7 리액트/Redux/GraphQL...' 확장 프로그램
> 컴포넌트를 위한 다양한 snippet이 존재한다.
>
> - `rafce`(reactArrowFunctionComponenetExport) 를 입력하면 자동으로 arrow function이 입력됨.

### App.js

다음과 같이 `<Header>`를 Header.js에 정의해 두고, `<Header title='Hello'/>`처럼 값을 넘겨 주면,

```js
import Header from './components/Header'

function App() {
  return (
    <div className="container">
      <Header title='Hello'/>
```

Header에서 매개변수로서 props로 받아올 수 있다.

```js
const Header = (props) => {
  return (
    <header>
      <h1>{props.title}</h1>
    </header>
  );
};
```

혹시 App에서 값을 넘겨주지 않을 때를 대비해서 다음과 같이 디폴트값을 지정해 둘 수도 있다. 값이 넘어오면 덮어씌우고, 아니면 디폴트 값이 출력된다.

```js
const Header = (props) => {
  return (
    <header>
      <h1>{props.title}</h1>
    </header>
  );
};

Header.defaultProps = {
  title: "Task Tracker",
};
```

props로 받아오는 게 맞긴 한데, 다음과 같이 조금 더 깔끔하게 해 줄 수 있다. `{}` 안에 담긴다는 것에 주의하자.

```js
const Header = ({ title }){
  return(
    <header>
      <h1>{title}</h1>
    </header>
  )
}
```

> - impt: `prop` 타입을 import한다.

스타일을 매기고 싶다면 다음과 같이 `style`값을 설정한다. `{% raw %}{{ }}{% endraw %}`로 감싸져 있음에 주의하자.

```js
<h1 style={% raw %}{{ style={{ color: 'red', backgroundColor: 'black' }} }}{% endraw %}>title</h1>
```

style을 따로 써두고 싶다면 다음과 같이 한다. `{headingStyle}`로 표기되어 있다.

```js
const Header = ({ title }) => {
  return (
    <header>
      <h1 style={headingStyle}>title</h1>
    </header>
  );
};

const headingStyle = {
  color: "red",
  backgroundColor: "black",
};
```

### 버튼 만들기

Header.js에 Button 컴포넌트를 추가하자.

Header.js

```js
import Button from "./Button";

const Header = ({ title }) => {
  return (
    <header className="header">
      <h1>{title}</h1>
      <Button color="red" text="Add" />
    </header>
  );
};
```

1. Props가 주어지지 않을 때의 default 값 추가하고,
2. Props가 가져야 할 타입도 지정한다.

Button.js

```js
import PropTypes from 'prop-types'

const Button ({ color, text }) => {
  return(
    <button style={% raw %}{{ backgroundColor: color }}{% endraw %} className='btn'>{ text }</button>
  )
}

Button.defaultProps = { // 1.
  color: 'steelblue',
}

Button.propTypes = {
  color: PropTypes.string,
  text: PropTypes.string,
}

```

event를 추가할 수도 있다.

Button.js

```js
const Button = () => {
  const onClick = () => {
    consol.log("clicked");
  };
  return (
    <button onclick={onClick} className="btn">
      {text}
    </button>
  );
};
```

그런데 매번 같은 클릭이 생기는 건 아니기 때문에, onClick 이벤트를 Button 컴포넌트가 아니라 Button을 호출하는 Header.js에서 정의해 줘야 한다.

Header.js

```js
const Header = () => {
  ...
  onClick() => {
    console.log('click')
  }
  return(
    <header className='header'>
      <Button color='green' text='hi' onClick={} />
    </header>
  )
}

```

Button.js

```js
const Button = ({ color, text, onClick }) {
  return(
    <button onClick={ onClick } style={% raw %}{{ backgroundColor: color }}{% endraw %} className='btn'>{ text }</button>
  )
}
```

### task 추가하기

```js
const tasks = [
  {
    id: 1,
    text: "Doctors Appointment",
    day: "Feb 5th at 2:30pm",
    reminder: true,
  },
];

const Tasks = () => {
  return (
    <>
      {tasks.map((task) => (
        <h3>{task.text}</h3>
      ))}
    </>
  );
};
export default Tasks;
```

`tasks.map(func)`은 tasks 리스트에 있는 원소들을 하나씩 돌아가면서 괄호 안에 있는 함수(func)를 실행한다.

warning이 발생한다. map(키와 값으로 자료 다루는)을 사용하면 jsx 출력으로 리스트가 나온다. 리스트의 차일드 들은 유니크한 key prop이 있어야 한다. 따라서 다음과 같이 task의 id를 이용해 key를 지정해 준다.

```js
const tasks = [
  { ... }
]
const Task = () => {
  return (
    <>
      {tasks.map((task) => (
        <h3 key={ task.id }>{ task.text }</h3>
      ))}
    </>
  )
}
```

task들을 배열에 저장해 두었는데, state를 이용하자.

```js
import { useState } from "react"; // 리액트 패키지에서 useState라는 함수 불러 오기

const Task = () => {
  const [tasks, setTasks] = useState([
    {
      id: 1,
      text: "Doctors Appointment",
      day: "Feb 5th at 2:30pm",
      reminder: true,
    },
    {
      id: 2,
      text: "Meeting at School",
      day: "Feb 6th at 1:30pm",
      reminder: false,
    },
  ]);
};
```

state는 immutable하기 때문에 tasks.push() 같은 방법으로 state에 추가할 수는 없다. `setTasks[..taks, {}]` 이런 식으로 해야 한다.
그런데 tasks를 Tasks 컴포넌트 안에 두면, Tasks 컴포넌트 안에 embed된 컴포넌트만 tasks에 접근할 수 있다. tasks가 다른 컴포넌트에서도 엑세스할 수 있도록 app.js에 저장하자. app.js에 적어 두면 tasks는 global state가 된다.

app.js

```js
import { useState } from 'react'
import Tasks from './components/Tasks';

function App() {
  const [tasks, setTasks] = useState(
    ...
  )
  return (
    <Tasks tasks={tasks} />
  )
}

```

유용한 아이콘들을 다운로드해 왔다.
`npm i react-icons`

다음과 같이 import하고 사용한다.

```js
import { FaTimes } from 'react-icons/fa'
...
      <h3>{task.text}<FaTimes style={% raw %}{{ color: 'red', cursor: 'pointer' }}{% endraw %}/></h3>
```

여기에서 x 버튼을 누르면 뭔가 되도록 이벤트를 만들어야 한다. 그런데 events들이 App 컴포넌트에 저장되어 있다. 이때 context api와 redux를 이용하면 컴포넌트 안에 있는 state를 쉽게 접근할 수 있지만 지금 여기서는 prop으로 하기로 한다.
