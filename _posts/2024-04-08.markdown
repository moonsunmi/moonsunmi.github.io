---
layout: post
title: "서버 컴포넌트의 등장과 Next.js 13의 변화, app 라우팅"
date: 2024-04-07 12:28:07 +0900
tags: post
---

기존에는 pages/\_app.js과 pages/\_document.js에서 공통 레이아웃 등을 적용하였다. Next.js가 13으로 버전 업그레이드되면서, 새로운 라우팅 시스템이 도입되었다.

이 두 파일은 사라지고, app/layout.js가 두 파일의 자리를 대신한다.

app에 디렉터리에 있는 페이지들은 기본적으로 서버 컴포넌트로 다루어진다. 반면에 pages 디렉터리에 있는 페이지들은 기본적으로 클라이언트 컴포넌트로 다루어진다.

라우팅 방식이 `/pages`에서 `/app`으로 바뀌었다. `/app` 내부에서 가질 수 있는 파일명은 몇 가지 예약어로 제한된다.

- `layout.js` : 기본적인 레이아웃을 구성한다.
- `page.js`: 컴포넌트를 노출한다.

pages 폴더 안에서는 파일 이름이 자동적으로 라우팅된다. 하지만 app 폴더 안에서는 중첩된 폴더를 사용한다. 특정 라우팅 세그먼트를 접근하기 위해서 page.js라는 파일을 이용한다.

리액트의 모든 컴포넌트는 클라이언트에서 작동하며, 브라우저에서 자바스크립트 코드가 처리된다.

웹 사이트를 방문하면, 리액트 코드를 다운로드한 후 리액트 컴포넌트 트리를 만든 다음, DOM에 렌더링한다.

### 리액트 서버 컴포넌트의 특징

- 서버에서 클라이언트로 정보를 보낼 때 스트리밍 형태로 보내므로 사용자에게 결과물을 빨리 보여줄 수 있다.(리액트에서 스트리밍이란, 서버 사이드 렌더링과 관련된 용어를 말한다. 서버에서 만들어진 데이터를 클라이언트로 '점진적으로' 전송하는 프로세스다. )

- 컴포넌트들이 하나의 번들러 작업에 포함돼 있지 않고, 컴포넌트별로 번들링이 별개로 되어 있다. 따라서 필요한 경우 컴포넌트를 지연해서 받는 등의 작업이 가능해진다.

- 서버 사이드 렌더링에서는 결과물이 HTML이다. 그러나 리액트 서버 컴포넌트는 JSON 형태로 보내진다. 클라이언트는 결국 서버 컴포넌트와 클라이언트 컴포넌트 두 가지를 이용해서 리액트 컴포넌트 트리를 만들어야 한다. 따라서 JSON 형태의 데이터를 보내, 이 트리를 빠르게 구성할 수 있게 한다.

```tsx
const componentType = typeof window === "undefined" ? "server" : "client";
```

### 서버 컴포넌트에서 데이터 가져오기

- 서버 컴포넌트는 데이터를 가져오는 비동기 작업에 프로미스 기능을 제공한다. 데이터를 가져오기 위해 `useEffect`나 `useState` 같은 훅을 사용하거나(서버 컴포넌트에서는 이것들을 쓸 수 없기도 함) 라이브러리를 쓸 필요가 없다.

- 서버 컴포넌트는 당연하게 서버에서 실행되므로, 연산을 위한 데이터를 클라이언트로 보낼 필요 없이 단순히 결괏값만 받아서 사용할 수도 있다.

- 추가적인 API 레이어가 없어도 클라이언트에게 기밀 정보를 노출할 위험 없이 데이터베이스에서 직접 데이터를 가져올 수 있다.

- Next.js는 CDN(Content Delivery Network)를 이용하여, 정적 데이터를 cache해둔다. 서버 부하도 줄일 수 있을 뿐 아니라 SEO에도 유리하다.
