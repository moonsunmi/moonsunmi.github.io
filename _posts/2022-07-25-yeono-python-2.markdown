---
layout: post
title: "연오의 파이썬 공부 2"
date: 2022-07-25 16:50:00 +0900
tags: yeono-python
---

### 2.2.4 변수는 이름이다

변수: 그 변수에 대입해 둔 데이터의 이름
변수의 이름을 가리키는 정식 프로그래밍 용어는 식별자. 파이썬에서는 프로그램 안의 모든 대상에 이름을 붙일 수 있다.

파이썬 이름의 제약
연산자로 사용되는 기호와 공백 문자는 사용할 수 없다.
숫자로 시작해서는 안 된다.
시스템 예약어를 이름으로 쓸 수 없다.

- 예약어는 컴퓨터 프로그래밍 언어에서 문법적인 용도로 사용되는 단어들

파이썬에서 데이터의 이름이 될 수 있는 경우와 없는 경우

#### 의미 있는 이름?

문맥과 상황에 따라 달라진다. 그 이름이 사용되는 문맥에서 충분히 구체적이면서도 동시에 간결한 이름이 좋다.

del로 데이터에 붙인 이름을 지울 수 있다.

중간 계산값을 사용하자.

#### 중간 계산값 누적하기

중간 계산값을 누적하며 계산할 때는 기억하는 변수를 꼭 초기화해야 한다.

```python
빵_칼로리 = 223.5

칼로리_총량 = 0  # 초깃값 설정하는 것이 중요하다

칼로리_총량 += 빵_칼로리 * 4
칼로리_총량 += 빵_칼로리 * 5
칼로리_총량 += 빵_칼로리 * 3

print(칼로리_총량)
```

#### 중간 계산값 기억하기 vs. 중간 계산값 누적하기

상황에 따라 더 나은 방식이 달라진다.

`input()` 함수는 사용자가 입력한 데이터를 텍스트 데이터로 돌려준다.

`int()` 함수는 데이터를 정수로, `float()` 함수는 데이터를 실수로 변환

#### 사용자의 입력을 계산에 이용하는 칼로리 계산 프로그램

```python
빵_칼로리 = 223.5

print('빵을 몇 개 먹었습니까?')
빵_먹은_개수 = int(input())

칼로리_총량 = 빵_칼로리 * 빵_먹은_개수

print(칼로리_총량, '만큼의 칼로리를 섭취하셨네요.')

```

연습문제 2-5

```python
x = 16

print(8 * (x ** 2) - 2 * x + 2)
```

연습문제 2-6

예상:
4
32
24

```python
x, y = 4, 8
print(x)
x *= y
print(x)
x -= y
print(x)
```

연습문제 2-7

```python
x = 2
print(x)
x *= 2
print(x)
x *= 2
print(x)
x *= 2
print(x)
x *= 2
print(x)
```

연습문제 2-8

```python
밀가루_in_피자 = 364 / 100 * 200
피망_in_피자 = 20.1 / 100 * 30
올리브_in_피자 = 115 / 100 * 10
돼지고기_in_피자 = 242.1 / 100 * 80
치즈_in_피자 = 402.5 / 100 * 20

한판 = 밀가루_in_피자 + 피망_in_피자 + 올리브_in_피자 + 돼지고기_in_피자 + 치즈_in_피자
print(한판 / 6)
```

=> 모범 답안은 화려하였다.

연습문제 2-9

```python
print('첫 번째 정수를 입력하세요.')
number1 = int(input())

print('두 번째 정수를 입력하세요.')
number2 = int(input())

print(number1, '+', number2, '=', number1 + number2)
print(number1, '-', number2, '=', number1 - number2)
print(number1, '*', number2, '=', number1 * number2)
print(number1, '/', number2, '=', number1 / number2)
```

## 3장 함수로 문제를 나누어 풀기

프로그램은 문제를 해결하기 위한 것이다. 크고 복잡한 문제를 의미로 구분해 나누어 생각하면, 작업의 의미와 과정을 파악하고 이해하기가 더 쉽다.

카페라테를 만드는 방법을 ‘에스프레소 추출하기, 우유 거품 만들기, 에스프레소와 우유를 합치기’로 나눌 수 있듯이 프로그래밍에서도 문제를 작게 나누고 각각의 작은 문제들을 해결하는 작은 프로그램들을 만들 수 있다. 이 작은 프로그램을 함수라고 한다.

### 3.2 함수 호출하기

함수의 이름을 불러 함수 내용으로 정의된 코드를 실행시킬 수 있다. 이것을 함수 호출이라 한다.

연습문제 3-1

```python
print, int, input, round, math.sqrt
```

### 3.3 함수 정의하기

함수를 이용해 프로그램 조각에 이름을 붙이는 것을 함수 정의라 한다.

함수를 정의할 때는 def 문을 사용한다.

```python
def 함수이름():
    본문
```

함수 이름은 식별자 규칙에 따라야 하고, 함수 이름 뒤에는 괄호와 콜론을 붙인다.
본문에서 각 행의 앞에서는 띄어쓰기 네 번으로 들여쓰기를 해야 한다. 같은 단계의 들여쓰기는 같은 블록이다.

```python
def order():
   print('주문하실 음료를 알려 주세요.')
   drink = input()
   print(drink, '주문하셨습니다.')

order()
```

파이썬에서 함수를 정의할 때 작성하는, 함수에 관한 설명을 독스트링이라 한다. 헤더행 바로 다음 행에 큰따옴표 세개로 감싸 적는다.
`help()` 함수가 보여주는 도움말이 바로 이 독스트링.

```python
def order():
   """사용자로부터 음료를 입력 받아, 주문 내역을 출력한다."""
   print('주문하실 음료를 알려 주세요.')
   drink = input()
   print(drink, '주문하셨습니다.')

order()

print(help(order))
```

함수에 전달된 데이터를 대입하기 위한 변수를 매개변수(parameter)라 한다. 함수에 전달하는 데이터 자체는 인자(argument)라 한다. 즉, 함수를 호출하면 함수에 전달한 인자(데이터)가 함수 속의 매개변수에 대입된다.

```python
def print_price(num_drink):
   """음료의 잔 수(num_drinK)를 전달받아 가격을 화면에 출력한다."""

   price_per_drink = 2500
   total_price = price_per_drink * num_drink

   print('음료', num_drink, '잔:', total_price)


print_price(3)
```

```python
def print_order(drink, cake):
   """음료(drink)와 케이크(cake)를 전달받아, 주문 내용을 화면에 출력한다."""
   print('음료:', drink, '케이크:', cake)


print_order('카페라테', '치즈케이크')
print_order('당근케이크', '우유')  # 인자의 순서 유의해야 한다!
```

- 함수에 인자를 전달할 때 개수나 순서를 유연하게 만드는 방법 coming soon

#### 데이터를 반환하기

함수가 만들어 낸 데이터를 함수를 호출한 지점으로 되돌려 주는 것을 “함수가 값을 반환한다”고 한다.

```python
def price(num_drink):
   """음료의 잔 수(num_drink)를 전달받아 가격을 반환한다."""
   price_per_drink = 2500
   total_price = price_per_drink * num_drink

   return total_price


result = price(3)
print('가격:', result)
```

함수의 실행을 중간에 끝낼 때 return 문을 쓸 수도 있다. return 문은 함수의 값을 반환할 때뿐 아니라 함수의 실행을 종료시킬 때도 쓸 수 있다.

```python
def print_to_3():
   """1부터 3까지 화면에 출력한다."""
   print(1)
   print(2)
   print(3)
   return
   print(4)
   print(5)

print_to_3()
```

함수를 정의할 때 return문을 작성하지 않거나, return문이 있더라도 반환값을 지정하지 않으면 함수는 None을 반환한다. 함수가 항상 None을 반환한다면 반환값이 없는 함수라고 할 수 있다.

연습문제 3-2 ~ 3-3

```python
def print_absolute():
   """사용자로부터 정수를 입력받아 그 수의 절댓값을 화면에 출력한다."""
   print('정수를 입력하세요.')
   number = int(input())
   result = abs(number)
   print(number, '의 절댓값:', result)


print_absolute()
```
