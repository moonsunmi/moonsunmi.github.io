---
layout: post
title: "w3school Javascript"
date: 2022-10-03 12:18:07 +0900
tags: javascript
---

### Object Properties

프로퍼티는 자바스크립트 오브젝트와 관련 있는 값이다. 자바스크립트 오브젝트는 프로퍼티를 순서와 상관 없이 모아둔 것이다.

#### for... in loop

다음의 for ... in loop는 오브젝트 안에 있는 프로퍼티를 전부 돌면서 실행한다.

```js
const person = {
  fname: "John",
  lname: "Doe",
  age: 25,
};

let text = "";
for (let x in person) {
  text += person[x];
}
```

#### 프로퍼티 추가/삭제

```js
person.nationality = "English"; // 존재하지 않는 프로퍼티를 이렇게 써 주면 추가가 된다.
delete person.nationality; // 삭제는 'delete'로.
```

delete는 오브젝트의 삭제를 위해서 디자인된 것. 함수나 변수 등에 사용할 수는 없다.

오브젝트 안에 오브젝트를 포함할 수 있다.

```js
const carOwner = {
  name = "John",
  age = 24,
  cars = {
    car1: "Ford",
    car2: "BMW"
  }
}

carOwner.cars.car1; // 이렇게 접근한다.
carOwner["cars"]["car1"]; // 이렇게 접근한다.
```

오브젝트들을 배열로 만들 수도 있고, 배열이 오브젝트가 될 수도 있다.

```js
const carOwner = {
  name = "John",
  age = 24,
  cars = [
    {name: "Ford", models: ["Mustang"]},
    {name: "BMW", models: ["X3", "X5"]}
  ]
}
```

값에 접근하려면 다음과 같이.

```js
for (let i in carOwer.cars) {
  for (let j in carOwer.cars[i].models) {
    carOwer.cars[i].models[j]; // 이렇게 접근한다.
  }
}
```

`Object.values`를 이용하면 오브젝트 안에 있는 프로퍼티들을 배열로 만들 수 있다. `JSON.stringify`를 이용하면 프로퍼티들을 문자열로 만들 수 있다. `JSON.stringify`는 함수는 출력하지 않는다.

```js
const person = {
  name: "John",
  age: 25,
};
const myArray = Object.values(person); // "John,25"
let myString = JSON.stringify(person); // {"name":"John","age":30,"city":"New York"}
```

### 자바스크립트 접근자

Getter/Setter 이런 상황에서는 메서드를 쓰는 게 아니라 getter와 setter를 쓰자.

```js
const person = {
  ...
  language: "English",
  get lang(){
    return this.language;
  }
  set lang(lang){
    this.language: lang;
  }
}
```

Getter/Setter 추가할 때 `Object.defineProperty()` 메서드를 사용한다.

```js
const obj = { counter: 0 };

Object.defineProperty(obj, "reset", {
  get: function () {
    this.counter = 0;
  },
});
Object.defineProperty(obj, "increment", {
  get: function () {
    this.counter += 1;
  },
});
Object.defineProperty(obj, "add", {
  set: function (num) {
    this.counter += num;
  },
});
```

### 오브젝트 생성자

```js
function Person(name, age) {
  this.name = name;
  this.age = age;
  this.changeName = function (name) {
    this.name = name;
  };
}
```

오브젝트 생성자에 프러퍼티를 추가할 수는 없다.

```js
Person.nationality = "English"; // X 추가 안 됨.
```

### 프로토타입

모든 오브젝트는 프로토타입에서 프러퍼티와 메서드를 상속 받는다.

- `Date` 오브젝트는 `Date.prototype`에서 상속 받고,
- `Array` 오브젝트는 `Array.prototype`에서 상속 받는다.

`Object.prototype`은 프로토타입의 가장 상위. 따라서 `Date` 오브젝트는 `Object.prototype`을 상속받는다.

```js
Person.prototype.nationality = "English"; // 프로포탙입을 이용하면 오브젝트 생성자에 프로퍼티를 추가할 수 있다.
```

### Map

#### Object vs. Map

- Object는 Iterable 객체(Symbol.iterator 속성에 특별한 함수가 있어서 for 문 등으로 루프를 돌 수 있다.), Map은 Iterable 객체가 아니다.
- Object는 size 프러퍼티가 없는데, Map은 있다.
- Object는 Key가 무조건 문자열이어야 하는데, Map은 어떤 타입이든 상관 없다.
- Object는 Key가 정렬되어 있지 않은데, Map은 정렬되어 있다.
- Object는 디폴트 키를 가지는데, Map은 가지지 않는다.

그런데 Map의 원소를 추출할 때 쓰는 다음의 메서드는 iterable 오브젝트를 반환한다.

- Map.forEach() : value, key
- Map.entries() : `[key, value]`
- Map.keys(): key
- Map.values(): value

따라서 다음과 같이 for문으로 루프를 돈다.

```js
let text = "";
for (const x of fruits.entries()) {
  text += x;
}
```

### 함수

```js
function myFunction(a, b) {
  arguments.length; // arguments의 개수
}
```

#### arrow function

```js
// ES5
var x = function (y, z) {
  return y * z;
};
// ES6
const x = (y, z) => y * z;
```

return문만 있을 때 생략이 가능한 것이므로, 다음과 같이 쓰는 버릇을 들이는 게 좋다.

```js
const x = (y, z) => {
  return y * z;
};
```

#### 함수 파라미터

전달될 arguments가 몇 개가 될지 몰라 파라미터를 정해 둘 수 없다면, 다음과 같이 arguments 오브젝트 사용하기

```js
x = findMax(1, 123, 500, 115, 44, 88);

function findMax() {
  let max = -Infinity;
  for (let i = 0; i < arguments.length; i++) {
    if (arguments[i] > max) {
      max = arguments[i];
    }
  }
  return max;
}
```

위 함수는 어느 오브젝트에도 속해 있지 않아 보이지만, 사실 글로벌 오브젝트가 존재한다. 이 함수는 자동으로 window 함수가 된다.

### function call

call()을 이용하면, 다른 오브젝트에 있는 메서드를 이용할 수 있다.

```js
const person = {
  fullName: function (city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  },
};
const person1 = {
  firstName: "John",
  lastName: "Doe",
};
const person2 = {
  firstName: "Mary",
  lastName: "Doe",
};

person.fullName.call(person1, "Oslo", "Norway"); // "John Doe ..."
person.fullName.call(person2, "Seoul", "Korea"); // "Mary Doe ..."
person.fullName.apply(person2, ["Seoul", "Korea"]); // "Mary Doe ..."
```

apply() 메서드는 call() 메서드와 역할은 비슷한데, arguments를 배열로 전달한다는 차이가 있다.

배열에서 최댓값을 찾을 때 apply() 메서드를 이용할 수 있다.

```js
Math.max.apply(아무거나, [1, 2, 3]); // 아무거나: Math, " ", 0 등등... 오브젝트가 아니라서
```

### Function Bind

bind는 오브젝트의 메서드를 빌려온다.

```js
const person = {
  firstName: "John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  },
};

const member = {
  firstName: "Hege",
  lastName: "Nilsen",
};

let fullName = person.fullName.bind(member);
```

callback 함수: 어떤 이벤트가 일어나거나 어떤 시점에 도달했을 때 시스템이 호출하는 함수.

```js
const person = {
  firstName: "John",
  lastName: "Doe",
  display: function () {
    let x = document.getElementById("demo");
    x.innerHTML = this.firstName + " " + this.lastName;
  },
};
person.display(); // "John Doe"가 제대로 출력된다.
setTimeout(person.display, 3000); // 3초 뒤에 undefined가 출력된다.
```

함수가 callback으로 호출되면, this는 값을 잃어 버리고 undefined가 된다. 이것을 해결해 주는 게 bind.

다음과 같이 해 주면 문제가 해결된다.

```js
let display = person.display.bind(person);
setTimeout(display, 3000);
```
