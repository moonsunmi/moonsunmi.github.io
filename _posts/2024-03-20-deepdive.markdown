---
layout: post
title: "React deep dive) 기타 리액트 훅"
date: 2024-03-20 12:28:07 +0900
tags: deepdive
---

#### forwardRef

forwardRef는 ref를 하위 컴포넌트로 직접 전달하기 위해서 사용된다. 부모 컴포넌트가 자식 컴포넌트의 DOM 노드에 직접 접근하거나 자식 컴포넌트가 제공하는 메서드를 호출할 수 있게 한다.

상위 컴포넌트에 있는 ref값을 하위 컴포넌트로 넘겨주고 싶다고 가정해 보자. 단순히 props로 넘겨줘도 되기는 하지만, props의 이름을 예약어로 지정된 ref로 하면 안 된다.

forwardRef를 쓰는 이유는 전달하는 props가 ref라는 것을 명확하게 하기 위해서다.

```js
const ChildComponent = forwardRef((props, ref) => {
  useEffect(() => {
    console.log(ref.current);
  }, [ref]);
  return <div>안녕!</div>;
});

function ParentComponent() {
  const inputRef = useRef();
  return (
    <>
      <input ref={inputRef} />
      <ChildComponent ref={inputRef} />
    </>
  );
}

export default ParentComponent;
```

forwardRef를 이용해서 ChildComponent에서 `ref`라는 이름으로 useRef 값을 사용할 수 있게 되었다.

### useImperativeHandle

`useImperativeHandle`을 이용하면 자식 컴포넌트의 HTMLElement뿐 아니라, 자식 컴포넌트에서 설정한 객체의 키와 값에 대해서도 접근할 수 있다.

```js
const Input = forwardRef((props, ref) => {
  useImperativeHandle(ref, () => ({ alert: () => alert(props.value) }), [
    props.value,
  ]);
  return <input ref={ref} {...props} />;
});

function App() {
  const inputRef = useRef();
  const [text, setText] = useState("");

  function handleChange(e) {
    setText(e.target.value);
  }

  function handleClick() {
    inputRef.current.alert();
  }

  return (
    <>
      <Input ref={inputRef} value={text} onChange={handleChange} />
      <button onClick={handleClick}>focus</button>
    </>
  );
}
export default App;
```

useImperativeHandle은 컴포넌트 간의 상호작용을 명령형 코드로 작성할 때 사용한다.

리액트의 선언적 패러다임을 벗어나기 때문에 사용에 유의해야 한다.

### useLayoutEffect

useEffect와 같은 역할을 하나, 순서에 차이가 있다.
리액트가 DOM을 업데이트한 후, 브라우저에 변경사항을 반영한 다음에 `useEffect`가 실행되는 것과 달리 `useLayoutEffect`는 DOM이 업데이트된 후에 실행된다.

성능에 영향을 끼칠 수 있으므로, 스크롤 위치 제어 등 꼭 필요할 때만 써야 한다.

### useDebugValue

훅 내부에서만 사용할 수 있으며, 디버깅할 때 유용하다.
