---
layout: post
title: "Java의 컬렉션 프레임워크와 자료구조"
date: 2024-05-16 12:28:07 +0900
tags: Java
---

![자바 자료구조](https://miro.medium.com/v2/resize:fit:640/format:webp/0*hc7lqrsecyzkutWU.png)

자바의 컬렉션 프레임워크에서는 다양한 컬렉션 클래스를 관리하기 위한 통합된 아키텍처를 제공한다.

이 구조의 최상위에는 Iterable 인터페이스가 존재한다.

- Collection 인터페이스: 공통된 메소드를 정의. List, Set, Queue 등이 속한다.
- List 인터페이스: 순서가 있는 데이터 집합을 다루고, 중복 허용. ArrayList, LinkedList, Vector 등
- Set 인터페이스: 순서를 보장하지 않으며, 데이터 중복 허용하지 않음. HashSet, LikedHashSet, TreeSet 등
- Queue 인터페이스: FIFO 방식 혹은 우선순위에 따른 데이터 처리. LikedList, PriorityQueue 등
- Map 인터페이스: 키와 값을 쌍으로 가지는 구조. HashMap, TreeMap, LikedHashMap 등

Array: 자바의 기본 자료구조임. 배열의 길이가 생성 시 결정되며, 변경이 불가능하다.

(자바에서는 abstract로 여러 상속 관계를 맺을 수 없다. 인터페이스를 사용하면 여러 상속 관계를 설정할 수 있다.)

다음은 stack을 구현한 것

```java
public class Stack {
    private Object[] elements;
    private int size = 0;
    private static final int DEFAULT_INITIAL_CAPACITY = 16;

    public Stack() {
        elements = new Object[DEFAULT_INITIAL_CAPACITY];
    }
    public void push(Object e) {
        ensureCapacity();
        elements[size++] = e;
    }

    public Object pop() {
        if (size == 0)
            throw new EmptyStackException();
        Object result = elements[--size];
        elements[size] = null; // 다 쓴 참조 해제
        return result;
    }

    private void ensureCapacity() {
        if (elements.length == size)
        elements = Arrays.copyOf(elements, 2 * size + 1);
    }
}

public class Main {
    public static void main(String[] args) {
        Stack stack = new Stack(); // 스택 객체 생성

        stack.push("Java"); // 스택에 "Java" 추가
        stack.push("Python"); // 스택에 "Python" 추가
        stack.push("C++"); // 스택에 "C++" 추가

        System.out.println(stack.pop()); // 스택에서 가장 최근에 추가된 "C++"을 제거하고 출력
        System.out.println(stack.pop()); // 다음으로 "Python"을 제거하고 출력

        // 스택이 비어있지 않으면 계속해서 요소를 제거
        while(true) {
            try {
                System.out.println(stack.pop());
            } catch (EmptyStackException e) {
                System.out.println("스택이 비어있습니다.");
                break;
            }
        }
    }
}
```
