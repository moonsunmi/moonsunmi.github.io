---
layout: post
title: "React JS Crash Course"
date: 2022-10-08 12:18:07 +0900
tags: React
---

x 버튼을 누르면 뭔가 되도록 이벤트를 만들어야 한다. 그런데 events들이 App 컴포넌트에 저장되어 있다. 이때 context api와 redux를 이용하면 컴포넌트 안에 있는 state를 쉽게 접근할 수 있지만 지금 여기서는 prop(`onDelete={deleteTask}`)으로 전달하기로 한다.

App.js

```js
const deleteTask = (id) => {
  console.log("delete", id);
};

return <Tasks tasks={tasks} onDelete={deleteTask} />;
```

Tasks.js

```js
const Tasks = ({tasks, onDelete}){
  return (
    <>
      {tasks.map((task) => (
        <Task key={task.id} task={task} onDelete={onDelete} />
      ))}
    </>
  )
}
```

Task.js의 x 아이콘 클릭할 때, `onClick`

Task.js

```js
const Task = ({task, onDelete}) => {
  <FaTimes ... onClick={onDelete}
}
```

어떤 task를 지울지 분간하기 위해서 id값을 전달하므로, 단순히 onDelete가 아니라 arrow function 형태로 id를 전달해 주자.

Task.js

```js
const Task = ({task, onDelete}) => {
  <FaTimes ... onClick={() => onDelete(task.id)}
}
```

tasks.filter()에서 `filter()` 배열 메서드. 주어진 조건을 만족하는 배열만 만들어진다.

App.js

```js
const deleteTask = (id){
  setTasks(tasks.filter((task) => task.id !== id))
}
```

> spread(...) operation
> 말 그대로 펼쳐주는 operation이다.
> `parts = ['two', 'three']` > `numbers = ['one', ...pars, 'four']   // numbers: ['one', 'two', 'three', 'four']`
>
> `var person = {name:'Alex', age: 35}` > `<Modal {...person} />은 다음과 같다.
`<Modal name={person.name} age={person.age} />`

### Reminder 표시하기

task 박스의 왼쪽에 border를 추가해서 Reminder 여부를 표시한다. Reminder는 task 단위로, 스타일은 div에 한다. Reminder가 true일 경우 className을 'task remider'로, Reminder가 false일 경우 className을 'task'로 하면 된다.

```js
cosnt Task = ({task, onDelete, onToggle}) => {
  return(
    <div
      className={`task ${task.reminder? 'reminder' : ''}`}
      onDoubleClick = {() => onToggle(task.id)}
    >
  )
}
```

### AddTask

Task 추가하는 부분 만들기. AddTask라는 컴포넌트를 만든다.

AddTask.js

```js
import { useState } from "react";

const AddTask = () => {
  const [text, setText] = useState("");
  const [day, setDay] = useState("");
  const [reminder, setReminder] = useState(false); // reminder는 false로 초기화한다.

  return (
    <form className="add-form">
      <div className="form-control">
        <label>Task</label>
        <input
          type="text"
          placeholder="Add Task"
          value={text}
          onChange={(e) => setText(e.target.value)}
        />
      </div>

      <input type="submit" value="Save Task" className="btn btn-block" />
    </form>
  );
};
```

target 이벤트는 해당 이벤트를 일으킨 엘리먼트를 가리킨다. 따라서 `e.target`은 이벤트를 일으킨 `input`이 되고, `e.target.value`는 input 엘리먼트의 value attribute 값인 text가 된다.

value에는 `{text}`, 즉 사용자가 입력하는 값을 주었기 때문에, `e.target.value`는 input 엘리먼트에서 사용자가 입력한 값이 되고, setText 메서드가 state에 이 값을 저장하게 되는 것.

Submit을 누른다고 바로 add하지 않겠다. 입력값 validation도 체크해야 하고, 입력 받은 후 칸을 비워주기도 해야 한다.

AddTask.js

```js
const onSubmit = (e) => {
  e.preventDefault(); // 기본으로 동작하는 걸 막고, 아래 걸 한다.

  if (!text) {
    alert("Please add a task");
    return;
  }
  onAdd({ text, day, reminder });

  setText("");
  setDay("");
  setReminder(false);
};
```

이제 App.js에 있는 addTask를 추가할 차례.

App.js

```js
const addTask = (task) => {
  const id = Math.floor(Math.random() * 10000) + 1;
  const newTask = { id, ...task };
  setTasks([...tasks, task]);
};
```

### addTask 입력란을 숨기기

addTask 입력란을 숨겼다가 보여줬다가 하는 걸 toggle로 만들자.

App.js

```js
function App(){
  const [showAddTask, setAddTask] = useState(false);
  ...
  return(
    <div ...
      <Header
        onAdd={() => setShowAddTask(!showAddTask)}
        showAdd={showAddTask}
      />
  );
}
```

Header.js

```js
const Header = ({ title, onAdd, showAdd }) => {
  <Button color={showAdd ? "red" : "green"} onClick={onAdd} />;
};
```

### production Build

터미널 창에서 `npm run build`를 하면, build 폴더가 생긴다. 이게 배포할 파일들이다.

`sudo npm i -g serve`를 한 다음에,

`serve -s build -p 8000`를 하면.

production build가 된다.

### JSON server

mock server에서 돌려 보자. json-server install하기.

```
npm i json-server
```

package.json에서 디버그 부분 추가하기

```js
    "server": "json-server --watch db.json --port 5000"
```

그다음 `npm run server`를 입력하면 'db.json' 파일이 생성된다. 터미널 추가해서 `npm start`로 서버를 실행시킨다.

db.json 파일을 열어서 app.js에서 저장해 두었던 tasks들을 옮겨 온다. json 파일 스타일대로 약간의 수정이 필요.

### useEffect

useEffect라는 훅을 쓸 예정이다. side effect를 만들거나 다루는 것.

useState 하단에 다음을 적자.

```js
function App() {
  useEffect(() => {
    const fetchTasks = async () => {
      const res = await fetch("http://localhost:5000/tasks");
      const data = await res.json();

      return data;
    };
    fetchTasks();
  }, []);
}
```

fetch는 promise를 호출하므로 promise를 await한다. 나중을 위해서 defendency array(`[]`)를 추가한다.

그런데 이 fetchTasks를 다른 데서도 쓸 수 있기 때문에 useEffect() 밖으로 빼자. getTasks도 async로. fetchTasks가 promise를 반환하기 때문에.

```js
useEffect(() => {
  const getTasks = async () => {
    const taskFromServer = await fetchTasks();
    setTasks(taskFromServer);
  };
  getTasks();
}, []);

const fetchTasks = async () => {
  const res = await fetch("http://localhost:5000/tasks");
  const data = await res.json();

  return data;
};
```

이제 deleteTask가 mock server에 있는 데이터를 지우도록 만들자. deleteTask를 async로 만들고, 'DELETE' method로 데이터를 가져오면 된다.

```js
const deleteTask = async (id) => {
  await fetch(`http://localhost:5000/tasks/${id}`, { method: "DELETE" });
  setTasks(tasks.filter((task) => task.id !== id));
};
```

<hr>
mock: 모조품
fetch: 불러오다
